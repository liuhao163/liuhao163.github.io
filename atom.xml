<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>liuhao163.github.io</title>
  
  <subtitle>杂七杂八</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://liuhao163.github.io/"/>
  <updated>2022-12-24T09:56:16.126Z</updated>
  <id>https://liuhao163.github.io/</id>
  
  <author>
    <name>Liu hao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>RUST学习-所有权</title>
    <link href="https://liuhao163.github.io/RUST%E5%AD%A6%E4%B9%A0-%E6%89%80%E6%9C%89%E6%9D%83/"/>
    <id>https://liuhao163.github.io/RUST学习-所有权/</id>
    <published>2022-12-24T17:36:53.000Z</published>
    <updated>2022-12-24T09:56:16.126Z</updated>
    
    <content type="html"><![CDATA[<p>  本章会讲解rust的核心特性，所有权</p><p>  程序运行时候都必须管理他们使用内存的方式<br>    – java,go通过gc来管理内存<br>    – c++ c通过显示的分配和释放内存来管理<br>    –rust用一套所有权机制来管理，编译器咋编译时候检查的规则。因为在编译时检查所以在运行时候没有任何回收内存的开销</p><h2 id="所有权规则"><a href="#所有权规则" class="headerlink" title="所有权规则"></a>所有权规则</h2><ol><li>每个值都有一个变量，这个变量是这个值的所有者</li><li>每个值同时只能有一个所有者</li><li><p>当所有者超出作用域时候该值会被删除</p><p>代码实例</p></li></ol><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//s在离开main作用域时候会通过drop（）函数使其失效变量会立即交回给系统</span></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut</span> s=<span class="built_in">String</span>::from(<span class="string">"hello"</span>)  ;</span><br><span class="line">s.push_str(<span class="string">",world"</span>);</span><br></pre></td></tr></table></figure><h2 id="通过string说明所有权"><a href="#通过string说明所有权" class="headerlink" title="通过string说明所有权"></a>通过string说明所有权</h2><p>  s1在Stack上保存了份数据ptr,len,capaciry，其中ptr是heap上保存的数据的地址<br>  s2在Stack上复制了份s1的数据ptr,len,capaciry，其中ptr是heap上保存的数据的地址<br>  当s1,s2都离开作用域时候会通过drop释放堆内存数据，这时候会引起bug double free，rust为了解决这个问题引入了move的概念</p><p>  move的原理：<br>  rust的所有权机制的解法：第一不会复制heap上的数据，第二由于s1赋值给了s1，那么s1堆内存的引用会失效，s1离开作用域不会释放任何数据，当然在作用域中s1不能再被使用。</p>  <figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">let</span> s1=<span class="built_in">String</span>::from(<span class="string">"hello"</span>);</span><br><span class="line"><span class="comment">// let s2=s1;</span></span><br><span class="line"><span class="comment">// println!("&#123;&#125;",s1); //这里会报错value borrowed here after move</span></span><br></pre></td></tr></table></figure><p>  clone的概念：相比于move连heap的值都copy过来这时候 s1是可以用的</p>  <figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s3=s1.clone();</span><br></pre></td></tr></table></figure><h2 id="Stack上的所有权问题"><a href="#Stack上的所有权问题" class="headerlink" title="Stack上的所有权问题"></a>Stack上的所有权问题</h2><p>  Stack上的赋值：copy.比如整数，<br>  Rust提供了Copy trait，当一个类型实现了Copy trait，那么旧的变量在赋值后依然可用；Drop trait 如果类型实现了该trait，就不能在实现Copy trait了</p>  <figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x=<span class="number">5</span>;</span><br><span class="line"><span class="keyword">let</span> y=x;</span><br><span class="line"><span class="built_in">print!</span>(<span class="string">"&#123;&#125;"</span>,x); <span class="comment">//这时候x是可用的</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;  本章会讲解rust的核心特性，所有权&lt;/p&gt;
&lt;p&gt;  程序运行时候都必须管理他们使用内存的方式&lt;br&gt;    – java,go通过gc来管理内存&lt;br&gt;    – c++ c通过显示的分配和释放内存来管理&lt;br&gt;    –rust用一套所有权机制来管理，编译器咋编译
      
    
    </summary>
    
      <category term="rust" scheme="https://liuhao163.github.io/categories/rust/"/>
    
      <category term="基础" scheme="https://liuhao163.github.io/categories/rust/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="rust" scheme="https://liuhao163.github.io/tags/rust/"/>
    
  </entry>
  
  <entry>
    <title>&#39;安全基本知识-加密&#39;</title>
    <link href="https://liuhao163.github.io/%E5%AE%89%E5%85%A8%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86-%E5%8A%A0%E5%AF%86/"/>
    <id>https://liuhao163.github.io/安全基本知识-加密/</id>
    <published>2022-09-21T23:12:36.000Z</published>
    <updated>2022-09-21T15:17:41.972Z</updated>
    
    <content type="html"><![CDATA[<h2 id="加密算法"><a href="#加密算法" class="headerlink" title="加密算法"></a>加密算法</h2><ol><li>对称加密：首选AES-GCM-256</li><li>非对称加密：首选RSA 2048如果选择ECC首选ECC 多用于对称加密秘钥的传输</li><li>单向散列：首选HMAC-SHA256，无论使用那种算法都需要加盐</li><li>消息认证：首选HMAC-SHA256，因为它能实现消息认证，和完整性保证</li></ol><h2 id="传输协议"><a href="#传输协议" class="headerlink" title="传输协议"></a>传输协议</h2><ol><li>首选TLS1.2，新业务推荐直接使用TLS1.3及以上版本</li></ol><h2 id="口令标准"><a href="#口令标准" class="headerlink" title="口令标准"></a>口令标准</h2><ol><li>能够与SSO集成的建议继承SSO，并且配合SSO实现双因子认证或者动态口令</li><li>使用静态口令场景应该符合<ol><li>不使用默认口令</li><li>不使用通用口令</li><li>口令长度不小于14位</li><li>应包含大写、消息、符号、字母、数字</li><li>用户口令<ol><li>不小于8位</li><li>应包含大写、消息、符号、字母、数字</li><li>建议不上传用户口令，用户侧用慢速散列发给服务端，服务端通过加盐配合HMAS-SHA256存储</li></ol></li></ol></li></ol><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ol><li>使用运维提供的组件清单中的服务</li><li>禁止使用FTP、Telnet等不安全的服务q</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;加密算法&quot;&gt;&lt;a href=&quot;#加密算法&quot; class=&quot;headerlink&quot; title=&quot;加密算法&quot;&gt;&lt;/a&gt;加密算法&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;对称加密：首选AES-GCM-256&lt;/li&gt;
&lt;li&gt;非对称加密：首选RSA 2048如果选择ECC首选ECC
      
    
    </summary>
    
      <category term="经验积累" scheme="https://liuhao163.github.io/categories/%E7%BB%8F%E9%AA%8C%E7%A7%AF%E7%B4%AF/"/>
    
      <category term="安全" scheme="https://liuhao163.github.io/categories/%E7%BB%8F%E9%AA%8C%E7%A7%AF%E7%B4%AF/%E5%AE%89%E5%85%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>JAVA的并发包:Lock和Conidtion</title>
    <link href="https://liuhao163.github.io/JAVA%E7%9A%84%E5%B9%B6%E5%8F%91%E5%8C%85-Lock%E5%92%8CConidtion/"/>
    <id>https://liuhao163.github.io/JAVA的并发包-Lock和Conidtion/</id>
    <published>2022-09-21T15:23:46.840Z</published>
    <updated>2022-09-21T15:24:11.507Z</updated>
    
    <content type="html"><![CDATA[<h2 id="再造管程的意义"><a href="#再造管程的意义" class="headerlink" title="再造管程的意义"></a>再造管程的意义</h2><p>  java的管程的关键字是synchronized，在1.6后对管程做了升级，引入了偏向锁，轻量级锁的概念，性能几乎和Lock相近。然而在某些场景还是没法取到Lock。<br>  主要集中synchronized如下的几个痛点</p><ol><li>无法主动响应中断：在synchronzed代码块中，如果已经获取了资源a,在获取b失败后，就直接进入了阻塞，无法主动响应中断，这时候遇到死锁我们是无法处理的；</li><li>无法设置过期时间：synchronzed无法设置过期时间;</li><li>无法在非阻塞情况下竞争锁资源：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">lockInterruptibly</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">lock</span><span class="params">(<span class="keyword">long</span> time, TimeUnit unit)</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(<span class="keyword">long</span> time, TimeUnit unit)</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><h2 id="lock的原理"><a href="#lock的原理" class="headerlink" title="lock的原理"></a>lock的原理</h2><p>我们以ReentrantLock为例子，类似管程，每个资源都一个等待队列。它是用一个双向链表实现的等待队列，同时每个链表的节点包含一个volatile的变量state作为锁标记位：0-release,1-lock。在调用lock/unlock方法中会通过cas修改volatile来实现state的变化。他是如何来保证在上锁解锁时候的可见性的呢？我们用下面的代码说明<br>rtl.lock上锁–&gt;之后value+=1–&gt;解锁,他们在并发场景下根据HB原则.</p><ol><li>顺序原则：线程1中：rtl.lock （HB于） value+=1 ；value+=1（HB于）rtl.unlock()</li><li>volatile的原则：此情况是针对线程1的rtl.unlock已经修改state成功但是由于可见性线程2的rtl.lock也申请锁的时候是否会失败？答案是不会，因为但当线程1的rtl.unlock修改state()和线程2的lock修改sate()发生冲突时候，由于rlt.lock需要先读取state，根据volatile的原则，写HB于读，所以unlock一定HB于lock，这时候lock一定读到的是最新的值</li><li>传递性原则：由于线程1的value+=1（HB于）rtl.unlock()，所以线程1的value+=1一定（HB于）于线程2的rtl.lock()</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Lock rtl = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">  <span class="keyword">int</span> value;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addOne</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取锁</span></span><br><span class="line">    rtl.lock();  </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      value+=<span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      <span class="comment">// 保证锁能释放</span></span><br><span class="line">      rtl.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="lock的特点"><a href="#lock的特点" class="headerlink" title="lock的特点"></a>lock的特点</h2><h2 id="可重入锁"><a href="#可重入锁" class="headerlink" title="可重入锁"></a>可重入锁</h2><p>lock和synchronized一样都是可重入锁：即同一个线程在获取锁之后，可以重复获取锁资源。（不可重入锁：即在此尝试获取锁资源会进入阻塞）</p><h2 id="公平锁和非公平数锁"><a href="#公平锁和非公平数锁" class="headerlink" title="公平锁和非公平数锁"></a>公平锁和非公平数锁</h2><p>lock可以实现贡公平锁，如：ReentrantLock的构造方法,见下面代码，具体可以看Sync的代码，如果是非公平锁，有可能最后获取资源的反而最先释放。详细可以去看<br>ReentrantLock内部类Sync的tryAcquire俩种实现。其中FairSync里有一个判断hasQueuedPredecessors</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Creates an instance of &#123;<span class="doctag">@code</span> ReentrantLock&#125;.</span></span><br><span class="line"><span class="comment"> * This is equivalent to using &#123;<span class="doctag">@code</span> ReentrantLock(false)&#125;.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ReentrantLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    sync = <span class="keyword">new</span> NonfairSync();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Creates an instance of &#123;<span class="doctag">@code</span> ReentrantLock&#125; with the</span></span><br><span class="line"><span class="comment"> * given fairness policy.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> fair &#123;<span class="doctag">@code</span> true&#125; if this lock should use a fair ordering policy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ReentrantLock</span><span class="params">(<span class="keyword">boolean</span> fair)</span> </span>&#123;</span><br><span class="line">    sync = fair ? <span class="keyword">new</span> FairSync() : <span class="keyword">new</span> NonfairSync();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Lock中的等待通知机制-Condition"><a href="#Lock中的等待通知机制-Condition" class="headerlink" title="Lock中的等待通知机制-Condition"></a>Lock中的等待通知机制-Condition</h2><p>管程中最主要的一个功能就是wait的等待通知机制。那么lock的等待通知机制则是Condition</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">ReentrantLock lock=<span class="keyword">new</span> ReentrantLock();</span><br><span class="line">Condition condition=lock.newCondition();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//阻塞等同于 object.wait()</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        condition.await();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//阻塞等同于 object.notify() object.notifyAll();</span></span><br><span class="line">    condition.signal();</span><br><span class="line">    condition.signalAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="操作异步转同步"><a href="#操作异步转同步" class="headerlink" title="操作异步转同步"></a>操作异步转同步</h2><p>有些操作本身是异步的，但是我们在使用中需要同步的场景，比如dubbo中我们的客户端通过tcp发送数据给服务端后，我们需要接收到返回值才能继续处理请求。而tcp本身就是异步的。这时候就需要同步转异步操作是如何实现的呢,见DefaultFeature，伪代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Request</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="keyword">private</span> Condition condition = lock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object ret;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Request <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//等待结果转同步</span></span><br><span class="line">            <span class="keyword">if</span> (!isDone()) &#123;</span><br><span class="line">                condition.await(<span class="number">1000L</span>,TimeUnit.MILLISECONDS);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!isDone()) &#123;</span><br><span class="line">                <span class="keyword">throw</span>  <span class="keyword">new</span> RuntimeException(<span class="string">"timeout"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isDone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doReceived</span><span class="params">(Object response)</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.ret = response;</span><br><span class="line">            <span class="comment">//在别的线程获取结果后异步通知</span></span><br><span class="line">            condition.signalAll();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="lock的最佳实践"><a href="#lock的最佳实践" class="headerlink" title="lock的最佳实践"></a>lock的最佳实践</h2><p>永远只用于锁要修改的成员表变量<br>永远只在访问可变的成员标量加锁<br>永远不要在调用其他对象的方法加锁—因为你不确定他内部是如何实现的</p><p>推荐阅读：</p><p>Doug Lea《Java 并发编程：设计原则与模式》</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;再造管程的意义&quot;&gt;&lt;a href=&quot;#再造管程的意义&quot; class=&quot;headerlink&quot; title=&quot;再造管程的意义&quot;&gt;&lt;/a&gt;再造管程的意义&lt;/h2&gt;&lt;p&gt;  java的管程的关键字是synchronized，在1.6后对管程做了升级，引入了偏向锁，轻量级
      
    
    </summary>
    
      <category term="java" scheme="https://liuhao163.github.io/categories/java/"/>
    
      <category term="并发" scheme="https://liuhao163.github.io/categories/java/%E5%B9%B6%E5%8F%91/"/>
    
    
      <category term="java" scheme="https://liuhao163.github.io/tags/java/"/>
    
      <category term="并发" scheme="https://liuhao163.github.io/tags/%E5%B9%B6%E5%8F%91/"/>
    
      <category term="aqs" scheme="https://liuhao163.github.io/tags/aqs/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://liuhao163.github.io/dubbo/index/"/>
    <id>https://liuhao163.github.io/dubbo/index/</id>
    <published>2022-09-21T15:03:02.192Z</published>
    <updated>2022-09-21T15:03:02.192Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>MyBatisy源码-概述</title>
    <link href="https://liuhao163.github.io/MyBatisy%E6%BA%90%E7%A0%81-%E6%A6%82%E8%BF%B0/"/>
    <id>https://liuhao163.github.io/MyBatisy源码-概述/</id>
    <published>2022-06-15T13:19:19.000Z</published>
    <updated>2022-09-21T15:03:02.160Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>  mybatis在国内是是java-web开发里非常重要的框架，通过xml配置的mappr对数据库进行了orm映射，降低程序对数据库访问的开发难度。</p><p>  希望通过阅读mybatis源码可以了解orm框架都有哪些角色，每个角色的边界是什么</p><h2 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h2><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>  作用：加载配置文件活着注解。</p><p>  关键类：Configuration：该对象加载了配置里的数据源、mappr的映射即“MappedStatement”，并且缓存到内存中</p><h3 id="会话"><a href="#会话" class="headerlink" title="会话"></a>会话</h3><h3 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h3><pre><code>作用：关键类：MappedStatement</code></pre><h3 id="执行器"><a href="#执行器" class="headerlink" title="执行器"></a>执行器</h3><pre><code>作用：关键类：Executor</code></pre><h3 id="处理器"><a href="#处理器" class="headerlink" title="处理器"></a>处理器</h3><pre><code>作用：关键类：</code></pre><ol><li>StatementHandler</li><li>ParamenterHandler</li><li>ResultSetHandler</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;  mybatis在国内是是java-web开发里非常重要的框架，通过xml配置的mappr对数据库进行了orm映射，降低程序对数据库访问的
      
    
    </summary>
    
      <category term="java" scheme="https://liuhao163.github.io/categories/java/"/>
    
      <category term="mybatis" scheme="https://liuhao163.github.io/categories/java/mybatis/"/>
    
    
      <category term="java" scheme="https://liuhao163.github.io/tags/java/"/>
    
      <category term="orm" scheme="https://liuhao163.github.io/tags/orm/"/>
    
      <category term="mybatis" scheme="https://liuhao163.github.io/tags/mybatis/"/>
    
      <category term="源码" scheme="https://liuhao163.github.io/tags/%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>状态机</title>
    <link href="https://liuhao163.github.io/%E8%87%AA%E5%8A%A8%E6%9C%BA/"/>
    <id>https://liuhao163.github.io/自动机/</id>
    <published>2022-05-22T16:47:08.000Z</published>
    <updated>2022-09-21T15:03:02.372Z</updated>
    
    <content type="html"><![CDATA[<p>最近刷题lc8写一个string–&gt;int的函数，结题思路是用限自动机的方案</p><ol><li>穷举有几种数字状态“ ”,”+/-“,”0-9”,”其他字符”，对应的 start、signin_number、end</li><li>穷举每种状态之间转化关系</li><li>遇到每种字符后，处理每种状态的逻辑</li></ol><h2 id="源码如下："><a href="#源码如下：" class="headerlink" title="源码如下："></a>源码如下：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(Integer.MAX_VALUE);</span><br><span class="line">        System.out.println(Integer.MIN_VALUE);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> Solution().myAtoi(<span class="string">"123213213213213211234"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">myAtoi</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        Automation automation=<span class="keyword">new</span> Automation();</span><br><span class="line">        <span class="keyword">return</span> automation.cal(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Automation</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, String[]&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">private</span> String curState = <span class="string">"start"</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">long</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> sign = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Automation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            initStatus();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">cal</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">char</span> c : s.toCharArray()) &#123;</span><br><span class="line">                parseChar(c);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> sign * (<span class="keyword">int</span>) res;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//穷举当前状态和下一个状态的对应关系</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initStatus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">//' '、+/-、0-9、other"</span></span><br><span class="line">            map.put(<span class="string">"start"</span>, <span class="keyword">new</span> String[]&#123;<span class="string">"start"</span>, <span class="string">"sign"</span>, <span class="string">"innumber"</span>, <span class="string">"end"</span>&#125;);</span><br><span class="line">            map.put(<span class="string">"sign"</span>, <span class="keyword">new</span> String[]&#123;<span class="string">"end"</span>, <span class="string">"end"</span>, <span class="string">"innumber"</span>, <span class="string">"end"</span>&#125;);</span><br><span class="line">            map.put(<span class="string">"innumber"</span>, <span class="keyword">new</span> String[]&#123;<span class="string">"end"</span>, <span class="string">"end"</span>, <span class="string">"innumber"</span>, <span class="string">"end"</span>&#125;);</span><br><span class="line">            map.put(<span class="string">"end"</span>, <span class="keyword">new</span> String[]&#123;<span class="string">"end"</span>, <span class="string">"end"</span>, <span class="string">"end"</span>, <span class="string">"end"</span>&#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//处理每种对应关系</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">parseChar</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123;</span><br><span class="line">            String state = map.get(curState)[getNextState(c)];</span><br><span class="line">            <span class="keyword">if</span> (state.equals(<span class="string">"innumber"</span>)) &#123;</span><br><span class="line">                res = res * <span class="number">10</span> + (c - <span class="string">'0'</span>);</span><br><span class="line">                res = sign == <span class="number">1</span> ? Math.min(res, (<span class="keyword">long</span>) Integer.MAX_VALUE) : Math.min(res, -(<span class="keyword">long</span>) Integer.MIN_VALUE);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (state.equals(<span class="string">"sign"</span>)) &#123;</span><br><span class="line">                sign = c == <span class="string">'-'</span> ? -<span class="number">1</span> : <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            curState = state;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getNextState</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">' '</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">'+'</span> || c == <span class="string">'-'</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Character.isDigit(c)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>当我们的系统复杂度到一定程度的时候，对象的状态分支会很多，我们可以选择用if，else来解决，但是最后往往会写出一堆几乎无法维护的屎山。那么我们可以将对象抽象成一个个状态，特殊情况实际上就是状态之间的转换。</p><p>比如上题，就是有限的状态之间的转换。<br><img src="/自动机/img0.png" alt="avator"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近刷题lc8写一个string–&amp;gt;int的函数，结题思路是用限自动机的方案&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;穷举有几种数字状态“ ”,”+/-“,”0-9”,”其他字符”，对应的 start、signin_number、end&lt;/li&gt;
&lt;li&gt;穷举每种状态之间转化关系&lt;
      
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://liuhao163.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
      <category term="算法" scheme="https://liuhao163.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="设计模式" scheme="https://liuhao163.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="算法" scheme="https://liuhao163.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="https://liuhao163.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>ebpf学习-初探ebpf</title>
    <link href="https://liuhao163.github.io/ebpf%E5%AD%A6%E4%B9%A0-%E5%88%9D%E6%8E%A2ebpf/"/>
    <id>https://liuhao163.github.io/ebpf学习-初探ebpf/</id>
    <published>2022-03-11T16:02:05.000Z</published>
    <updated>2022-09-21T15:03:02.193Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ebpf是什么"><a href="#ebpf是什么" class="headerlink" title="ebpf是什么"></a>ebpf是什么</h2><p>  Linux内核一直是实现监视/可观察性，网络和安全性的理想场所。不幸的是，这通常是不切实际的，因为它需要更改内核源代码或加载内核模块，并导致彼此堆叠的抽象层。 eBPF是一项革命性的技术，可以在Linux内核中运行沙盒程序，而无需更改内核源代码或加载内核模块。通过使Linux内核可编程，基础架构软件可以利用现有的层，从而使它们更加智能和功能丰富，而无需继续为系统增加额外的复杂性层。</p><p>  eBPF导致了网络，安全性，应用程序配置/跟踪和性能故障排除等领域的新一代工具的开发，这些工具不再依赖现有的内核功能，而是在不影响执行效率或安全性的情况下主动重新编程运行时行为。</p><p>  如果直接解释eBPF，有点不明所以。那我们就看看有哪些基于eBPF的工程，这些工程或许你已经知道，或是已经经常使用，也许你会明白eBPF距离我们并不遥远。</p><h2 id="基于eBPF的项目"><a href="#基于eBPF的项目" class="headerlink" title="基于eBPF的项目"></a>基于eBPF的项目</h2><ol><li><p>bcc<br>BCC是用于创建基于eBPF的高效内核跟踪和操作程序的工具包，其中包括一些有用的命令行工具和示例。 BCC简化了用C进行内核检测的eBPF程序的编写，包括LLVM的包装器以及Python和Lua的前端。它还提供了用于直接集成到应用程序中的高级库。</p></li><li><p>bpftrace<br>bpftrace是Linux eBPF的高级跟踪语言。它的语言受awk和C以及DTrace和SystemTap等以前的跟踪程序的启发。 bpftrace使用LLVM作为后端将脚本编译为eBPF字节码，并利用BCC作为与Linux eBPF子系统以及现有Linux跟踪功能和连接点进行交互的库。</p></li><li><p>Cilium<br>Cilium是一个开源项目，提供基于eBPF的联网，安全性和可观察性。它是从头开始专门设计的，旨在将eBPF的优势带入Kubernetes的世界，并满足容器工作负载的新可伸缩性，安全性和可见性要求。</p></li><li><p>Falco<br>Falco是一种行为活动监视器，旨在检测应用程序中的异常活动。 Falco在eBPF的帮助下审核Linux内核层的系统。它使用其他输入流（例如容器运行时度量标准和Kubernetes度量标准）丰富了收集的数据，并允许连续监视和检测容器，应用程序，主机和网络活动。</p></li><li><p>Katran<br>Katran是一个C ++库和eBPF程序，用于构建高性能的第4层负载平衡转发平面。 Katran利用Linux内核中的XDP基础结构来提供用于快速数据包处理的内核功能。它的性能与NIC接收队列的数量成线性比例，并且使用RSS友好的封装转发到L7负载平衡器。</p></li><li><p>Sysdig</p><p>Sysdig是提供深层系统可见性的简单工具，并具有对容器的原生支持。<br>其他基于eBPF技术的项目还有很多，比如kubectl-trace ，ply 等，这里不再赘述。</p></li></ol><h2 id="一个简单的DEMO"><a href="#一个简单的DEMO" class="headerlink" title="一个简单的DEMO"></a>一个简单的DEMO</h2><p> 下面我们写一个简单的demo来展示下开发一个ebpf程序需要哪些步骤，这里我们采用Cilium/ebpf库进行开发，因为ebpf的用户态代码可以用golang开发。:P</p><p> 程序是通过ebpf的tracepoint监听syscalls/sys_enter_execve，在执行该方法时候获取pid和commd。通过ebpf的map将pid和commd传到用户态。</p><h3 id="step-1-环境搭建"><a href="#step-1-环境搭建" class="headerlink" title="step.1 环境搭建"></a>step.1 环境搭建</h3><p>系统配置： Ubuntu 20.04.4<br>系统依赖： llvm，clang-10.0.0-4ubuntu1，还有linux的kernel这里源码在路径（/kernel-src），golang环境</p><h3 id="step-2-编写ebpf的kernel侧的程序-c代码"><a href="#step-2-编写ebpf的kernel侧的程序-c代码" class="headerlink" title="step.2 编写ebpf的kernel侧的程序-c代码"></a>step.2 编写ebpf的kernel侧的程序-c代码</h3><ol><li>编写代码并且用下面命令将代码变成bpf_program.o<br>clang -O2 -target bpf -c bpf_program.c -I/kernel-src/tools/testing/selftests/bpf  -o bpf_program.o</li><li>将bpf_program.o文件copy到golang程序下</li></ol><p>源码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/bpf.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bpf_helpers.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/types.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SEC(NAME) __attribute__((section(NAME), used))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义c的结构，将pid和comm封装到该结构体，将该结构体通过tracker_map传递给用户态</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">event_data_t</span> &#123;</span></span><br><span class="line">    __u32 pid;</span><br><span class="line">    <span class="keyword">char</span> comm[<span class="number">20</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义ebpf的map</span></span><br><span class="line"><span class="function">struct bpf_map_def <span class="title">SEC</span><span class="params">(<span class="string">"maps"</span>)</span> tracker_map </span>= &#123;</span><br><span class="line">        .type = BPF_MAP_TYPE_HASH,</span><br><span class="line">        .key_size = <span class="keyword">sizeof</span>(<span class="keyword">int</span>),</span><br><span class="line">        .value_size = <span class="keyword">sizeof</span>(struct <span class="keyword">event_data_t</span>),</span><br><span class="line">        .max_entries = <span class="number">2048</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ebpf程序挂载点，</span></span><br><span class="line">SEC(<span class="string">"tracepoint/syscalls/sys_enter_execve"</span>)</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bpf_prog</span><span class="params">(<span class="keyword">void</span> *ctx)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">event_data_t</span> <span class="title">evt</span> = &#123;</span>&#125;;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    __u64 id = bpf_get_current_pid_tgid();</span><br><span class="line">    evt.pid = id &gt;&gt; <span class="number">32</span>;</span><br><span class="line">    </span><br><span class="line">    bpf_get_current_comm(&amp;evt.comm, <span class="keyword">sizeof</span>(evt.comm));</span><br><span class="line">    bpf_map_update_elem(&amp;tracker_map, &amp;index, &amp;evt, BPF_ANY);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//协议</span></span><br><span class="line"><span class="keyword">char</span> _license[] SEC(<span class="string">"license"</span>) = <span class="string">"GPL"</span>;</span><br></pre></td></tr></table></figure><h3 id="step3用户态侧代码-golang的代码"><a href="#step3用户态侧代码-golang的代码" class="headerlink" title="step3用户态侧代码-golang的代码"></a>step3用户态侧代码-golang的代码</h3><ul><li>编写go代码</li><li>执行go build ./</li><li>执行go程序，这里是go-tools</li></ul><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mapKey <span class="keyword">uint32</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ebpf标签的说明</span></span><br><span class="line"><span class="comment">// BpfProg对应的是c程序中的bSEC(tracepoinst/...)的方法名</span></span><br><span class="line"><span class="comment">// TrackerMap对应的c程序中的SEC(map)</span></span><br><span class="line"><span class="keyword">type</span> bpfPrograms <span class="keyword">struct</span> &#123;</span><br><span class="line">BpfProg    *ebpf.Program <span class="string">`ebpf:"bpf_prog"`</span></span><br><span class="line">TrackerMap *ebpf.Map     <span class="string">`ebpf:"tracker_map"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *bpfPrograms)</span> <span class="title">Close</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">err := p.BpfProg.Close()</span><br><span class="line">err = p.TrackerMap.Close()</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字段类型，对应c程序中的event_data_t类型，注意Comm是uint8</span></span><br><span class="line"><span class="keyword">type</span> EventData <span class="keyword">struct</span> &#123;</span><br><span class="line">Pid  <span class="keyword">uint32</span></span><br><span class="line">Comm [<span class="number">20</span>]<span class="keyword">uint8</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e EventData)</span> <span class="title">CommHex</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">ba := []<span class="keyword">byte</span>&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> _, b := <span class="keyword">range</span> e.Comm &#123;</span><br><span class="line">ba = <span class="built_in">append</span>(ba, b)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">string</span>(ba)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//程序</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">LoadTestEbpf</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">if</span> err := rlimit.RemoveMemlock(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//加载c编译出来的.o文件的相对路径,这个地址一定不能出错</span></span><br><span class="line">spec, err := ebpf.LoadCollectionSpec(<span class="string">"ebpf/bpf_program.o"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//赋值obj</span></span><br><span class="line">obj := bpfPrograms&#123;&#125;</span><br><span class="line"><span class="keyword">if</span> err := spec.LoadAndAssign(&amp;obj, <span class="literal">nil</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> obj.Close()</span><br><span class="line"></span><br><span class="line">tp, err := link.Tracepoint(<span class="string">"syscalls"</span>, <span class="string">"sys_enter_execve"</span>, obj.BpfProg)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> tp.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Read loop reporting the total amount of times the kernel</span></span><br><span class="line"><span class="comment">// function was entered, once per second.</span></span><br><span class="line">ticker := time.NewTicker(<span class="number">1</span> * time.Second)</span><br><span class="line">log.Println(<span class="string">"Waiting for events.."</span>)</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">range</span> ticker.C &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> value []<span class="keyword">byte</span></span><br><span class="line"><span class="comment">//c的结构体序列化成bytes（value）</span></span><br><span class="line"><span class="keyword">if</span> err := obj.TrackerMap.Lookup(&amp;mapKey, &amp;value); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Printf(<span class="string">"reading map: %v"</span>, err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">var</span> event EventData</span><br><span class="line"><span class="comment">//c的结构体序列化成golang的喜爱那个并且打印出来</span></span><br><span class="line"><span class="keyword">if</span> err := binary.Read(bytes.NewBuffer(value), binary.LittleEndian, &amp;event); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Printf(<span class="string">"parsing perf event: %s"</span>, err)</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">log.Printf(<span class="string">"pid:%v,comm:%v"</span>, event.Pid, event.CommHex())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序入口</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ebpf.LoadTestEbpf()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="step3，运行查看效果"><a href="#step3，运行查看效果" class="headerlink" title="step3，运行查看效果"></a>step3，运行查看效果</h3><ul><li>在终端1上运行：./go-tools</li><li>在中断2上输入任何指令</li><li>查看终端1的输出</li></ul><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2022</span>/<span class="number">03</span>/<span class="number">11</span> <span class="number">17</span>:<span class="number">01</span>:<span class="number">26</span> reading <span class="keyword">map</span>: lookup: key does not exist</span><br><span class="line"><span class="number">2022</span>/<span class="number">03</span>/<span class="number">11</span> <span class="number">17</span>:<span class="number">01</span>:<span class="number">30</span> pid:<span class="number">60184</span>,comm:sshd</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;ebpf是什么&quot;&gt;&lt;a href=&quot;#ebpf是什么&quot; class=&quot;headerlink&quot; title=&quot;ebpf是什么&quot;&gt;&lt;/a&gt;ebpf是什么&lt;/h2&gt;&lt;p&gt;  Linux内核一直是实现监视/可观察性，网络和安全性的理想场所。不幸的是，这通常是不切实际的，因
      
    
    </summary>
    
      <category term="经验积累" scheme="https://liuhao163.github.io/categories/%E7%BB%8F%E9%AA%8C%E7%A7%AF%E7%B4%AF/"/>
    
      <category term="工具" scheme="https://liuhao163.github.io/categories/%E7%BB%8F%E9%AA%8C%E7%A7%AF%E7%B4%AF/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="ebpf" scheme="https://liuhao163.github.io/tags/ebpf/"/>
    
      <category term="内核编程" scheme="https://liuhao163.github.io/tags/%E5%86%85%E6%A0%B8%E7%BC%96%E7%A8%8B/"/>
    
      <category term="C语言" scheme="https://liuhao163.github.io/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>用antlr开发一个简单的规则引擎</title>
    <link href="https://liuhao163.github.io/%E7%94%A8antlr%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E8%A7%84%E5%88%99%E5%BC%95%E6%93%8E/"/>
    <id>https://liuhao163.github.io/用antlr开发一个简单的规则引擎/</id>
    <published>2022-03-11T16:01:00.000Z</published>
    <updated>2022-09-21T15:03:02.283Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>golang源码学习-sync.Map</title>
    <link href="https://liuhao163.github.io/Go%E8%AF%AD%E8%A8%80%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0-sync-Map/"/>
    <id>https://liuhao163.github.io/Go语言源码学习-sync-Map/</id>
    <published>2021-12-15T11:20:52.000Z</published>
    <updated>2022-09-21T15:03:02.087Z</updated>
    
    <content type="html"><![CDATA[<h2 id="sync-Map"><a href="#sync-Map" class="headerlink" title="sync.Map"></a>sync.Map</h2><p>  位于sync包中，主要解决map的线程安全的问题，适用于读多写少的场景。</p><h2 id="sync-Map的原理"><a href="#sync-Map的原理" class="headerlink" title="sync.Map的原理"></a>sync.Map的原理</h2><p>  内部持有俩个map，一个是read，类型是atomic.Value实际类型是【map[interface{}]<em>entry】，一个是dirty类型是map【[interface{}]</em>entry】。</p><p>  其中read主要解决无数据竞争的情况下数据的快速访问，它通过cas进行快速的读写操作；一旦出现数据的竞争，就会用到dirty，dirty里面保存read里所有非nil的值【通过状态来表示unexpunged】，当出现竞争后数据会写到dirty而不是read中。</p><p>  数据的访问路径大致是：</p><ul><li>读，先从read里找，read里没有，去dirty里找，如果miss过一定的阈值【dirty的长度】时候，将dirty和read交换，交换后dirty置为nil；</li><li><p>写，先判断key是否存在，如果存在且不为expunaged，先通过cas写快速返回，否则有如下分支：</p><ul><li>如果key是expunaged，说明key之前被删除了，但是dirty没有，unexpunaged之后同步修改read和dirty</li><li>如果key不存在于read，但是存在于dirty修改dirty</li><li>如果key不存在与read和dirty，初始化dirty【如果需要】，数据写入dirty</li></ul><p>因为数据在并发写的时候一旦发生竞争还是会用到锁，并发写的时候的锁是不可避免的。所以sync.Map适用于读多写少数据冲突不那么复杂的场景</p></li></ul><h2 id="sync-Map的源码分析"><a href="#sync-Map的源码分析" class="headerlink" title="sync.Map的源码分析"></a>sync.Map的源码分析</h2><h3 id="结构体分析"><a href="#结构体分析" class="headerlink" title="结构体分析"></a>结构体分析</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Map <span class="keyword">struct</span> &#123;</span><br><span class="line">mu Mutex <span class="comment">//锁 用来保护read、dirty的并发控制</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// read包含部分map的内容，他是atomic.Value类型的用来解决并发访问的安全的问题，在读的场景不需要加锁，而在写的场景需要mu的控制</span></span><br><span class="line">read atomic.Value <span class="comment">// readOnly </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// dirty访问要在mu的保护下进行，他包含所有的readOnly里non-expunged的数据</span></span><br><span class="line"><span class="comment">// 在read中标记为Expunged的entries不会被存储在dirt中，如果一个在read中存在的key被标记为expunged,他需要先unexpunged在保存在dirty中</span></span><br><span class="line"><span class="comment">// 如果dirty是nil，当下一次修改map的时候需要初始化dirty，初始化的方式是将read的不为exunped的value都copy到dirty中</span></span><br><span class="line">dirty <span class="keyword">map</span>[<span class="keyword">interface</span>&#123;&#125;]*entry</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计数器，当从read读取数据时候miss回增加该值，打到一定的阈值，即miss&gt;=len(dirty)的时候回触发dirty和read的互换</span></span><br><span class="line">misses <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// read中的值</span></span><br><span class="line"><span class="keyword">type</span> readOnly <span class="keyword">struct</span> &#123;</span><br><span class="line">m       <span class="keyword">map</span>[<span class="keyword">interface</span>&#123;&#125;]*entry</span><br><span class="line">amended <span class="keyword">bool</span> <span class="comment">// 一个标记为，默认是false，true说明readOnly的m和dirty已经同步过了，即dirty不为nil了，在Store操作中，dirtyLocked函数调用后会置为true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="keyword">type</span> entry <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 封装了指向value值的指针</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// If p == nil, the entry has been deleted and m.dirty == nil.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// If p == expunged, the entry has been deleted, m.dirty != nil, and the entry</span></span><br><span class="line"><span class="comment">// is missing from m.dirty.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Otherwise, the entry is valid and recorded in m.read.m[key] and, if m.dirty</span></span><br><span class="line"><span class="comment">// != nil, in m.dirty[key].</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// An entry can be deleted by atomic replacement with nil: when m.dirty is</span></span><br><span class="line"><span class="comment">// next created, it will atomically replace nil with expunged and leave</span></span><br><span class="line"><span class="comment">// m.dirty[key] unset.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// An entry's associated value can be updated by atomic replacement, provided</span></span><br><span class="line"><span class="comment">// p != expunged. If p == expunged, an entry's associated value can be updated</span></span><br><span class="line"><span class="comment">// only after first setting m.dirty[key] = e so that lookups using the dirty</span></span><br><span class="line"><span class="comment">// map find the entry.</span></span><br><span class="line">p unsafe.Pointer <span class="comment">// *interface&#123;&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//标记位当entry.p=expunged说明，该对象在read中被删除，标记了expunged的key不会出现在dirty中。</span></span><br><span class="line"><span class="keyword">var</span> expunged = unsafe.Pointer(<span class="built_in">new</span>(<span class="keyword">interface</span>&#123;&#125;))</span><br></pre></td></tr></table></figure><h3 id="Store"><a href="#Store" class="headerlink" title="Store"></a>Store</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Map)</span> <span class="title">Store</span><span class="params">(key, value <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line"><span class="comment">//从read中获取readOnly，如果key存在，通过cas修改不为expunged的值，成功后快速返回</span></span><br><span class="line">read, _ := m.read.Load().(readOnly)</span><br><span class="line"><span class="keyword">if</span> e, ok := read.m[key]; ok &amp;&amp; e.tryStore(&amp;value) &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改失败通过锁进行鬓发保护</span></span><br><span class="line">m.mu.Lock()</span><br><span class="line">read, _ = m.read.Load().(readOnly)<span class="comment">//双重检查</span></span><br><span class="line"><span class="keyword">if</span> e, ok := read.m[key]; ok &#123;</span><br><span class="line"><span class="comment">//key存在于read但是状态是expunged，cas修改成nil，同步dirty和readOnly的值，</span></span><br><span class="line"><span class="keyword">if</span> e.unexpungeLocked() &#123;</span><br><span class="line"><span class="comment">//走到这里说明dirty已经被初始化了，见m.dirtyLocked()里e.tryExpungeLocked()这一步</span></span><br><span class="line">m.dirty[key] = e</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//cas保存value</span></span><br><span class="line">e.storeLocked(&amp;value)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> e, ok := m.dirty[key]; ok &#123;</span><br><span class="line"><span class="comment">//key存在于dirty</span></span><br><span class="line">e.storeLocked(&amp;value)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//!read.amended说明dirty为空初始化dirty，将read中不为expunged值写入dirty，见下面</span></span><br><span class="line"><span class="keyword">if</span> !read.amended &#123;</span><br><span class="line">m.dirtyLocked()</span><br><span class="line">m.read.Store(readOnly&#123;m: read.m, amended: <span class="literal">true</span>&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//修改dirty的值</span></span><br><span class="line">m.dirty[key] = newEntry(value)</span><br><span class="line">&#125;</span><br><span class="line">m.mu.Unlock()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Map)</span> <span class="title">dirtyLocked</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> m.dirty != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">read, _ := m.read.Load().(readOnly)</span><br><span class="line">m.dirty = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">interface</span>&#123;&#125;]*entry, <span class="built_in">len</span>(read.m))</span><br><span class="line"><span class="keyword">for</span> k, e := <span class="keyword">range</span> read.m &#123;</span><br><span class="line"><span class="keyword">if</span> !e.tryExpungeLocked() &#123;</span><br><span class="line">m.dirty[k] = e</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *entry)</span> <span class="title">tryExpungeLocked</span><span class="params">()</span> <span class="params">(isExpunged <span class="keyword">bool</span>)</span></span> &#123;</span><br><span class="line">p := atomic.LoadPointer(&amp;e.p)</span><br><span class="line"><span class="keyword">for</span> p == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> atomic.CompareAndSwapPointer(&amp;e.p, <span class="literal">nil</span>, expunged) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">p = atomic.LoadPointer(&amp;e.p)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> p == expunged</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Load"><a href="#Load" class="headerlink" title="Load"></a>Load</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Map)</span> <span class="title">Load</span><span class="params">(key <span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(value <span class="keyword">interface</span>&#123;&#125;, ok <span class="keyword">bool</span>)</span></span> &#123;</span><br><span class="line">read, _ := m.read.Load().(readOnly)</span><br><span class="line"><span class="comment">//优先读取read</span></span><br><span class="line">e, ok := read.m[key]</span><br><span class="line"><span class="keyword">if</span> !ok &amp;&amp; read.amended &#123;</span><br><span class="line"><span class="comment">//key不存在但是dirty已经初始化，这里需要锁来保护并发冲突</span></span><br><span class="line">m.mu.Lock()</span><br><span class="line">read, _ = m.read.Load().(readOnly)<span class="comment">//双重检查</span></span><br><span class="line">e, ok = read.m[key]</span><br><span class="line"><span class="keyword">if</span> !ok &amp;&amp; read.amended &#123;</span><br><span class="line"><span class="comment">//从dirty里取</span></span><br><span class="line">e, ok = m.dirty[key]</span><br><span class="line"><span class="comment">//超过阈值交换dirty和read,并且dirty置为nil，见下面</span></span><br><span class="line">m.missLocked()</span><br><span class="line">&#125;</span><br><span class="line">m.mu.Unlock()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//加载value</span></span><br><span class="line"><span class="keyword">return</span> e.load()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *entry)</span> <span class="title">load</span><span class="params">()</span> <span class="params">(value <span class="keyword">interface</span>&#123;&#125;, ok <span class="keyword">bool</span>)</span></span> &#123;</span><br><span class="line">p := atomic.LoadPointer(&amp;e.p)</span><br><span class="line"><span class="keyword">if</span> p == <span class="literal">nil</span> || p == expunged &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> *(*<span class="keyword">interface</span>&#123;&#125;)(p), <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Map)</span> <span class="title">missLocked</span><span class="params">()</span></span> &#123;</span><br><span class="line">m.misses++</span><br><span class="line"><span class="keyword">if</span> m.misses &lt; <span class="built_in">len</span>(m.dirty) &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">m.read.Store(readOnly&#123;m: m.dirty&#125;)</span><br><span class="line">m.dirty = <span class="literal">nil</span></span><br><span class="line">m.misses = <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Map)</span> <span class="title">Delete</span><span class="params">(key <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">read, _ := m.read.Load().(readOnly)</span><br><span class="line">e, ok := read.m[key]</span><br><span class="line"><span class="keyword">if</span> !ok &amp;&amp; read.amended &#123;</span><br><span class="line">m.mu.Lock()</span><br><span class="line">read, _ = m.read.Load().(readOnly)</span><br><span class="line">e, ok = read.m[key]</span><br><span class="line"><span class="keyword">if</span> !ok &amp;&amp; read.amended &#123;</span><br><span class="line"><span class="built_in">delete</span>(m.dirty, key)</span><br><span class="line">&#125;</span><br><span class="line">m.mu.Unlock()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ok &#123;</span><br><span class="line">e.<span class="built_in">delete</span>()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *entry)</span> <span class="title">delete</span><span class="params">()</span> <span class="params">(hadValue <span class="keyword">bool</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">p := atomic.LoadPointer(&amp;e.p)</span><br><span class="line"><span class="keyword">if</span> p == <span class="literal">nil</span> || p == expunged &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> atomic.CompareAndSwapPointer(&amp;e.p, p, <span class="literal">nil</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;sync-Map&quot;&gt;&lt;a href=&quot;#sync-Map&quot; class=&quot;headerlink&quot; title=&quot;sync.Map&quot;&gt;&lt;/a&gt;sync.Map&lt;/h2&gt;&lt;p&gt;  位于sync包中，主要解决map的线程安全的问题，适用于读多写少的场景。&lt;/p&gt;
&lt;h2
      
    
    </summary>
    
      <category term="golang" scheme="https://liuhao163.github.io/categories/golang/"/>
    
      <category term="源码学习" scheme="https://liuhao163.github.io/categories/golang/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="golang" scheme="https://liuhao163.github.io/tags/golang/"/>
    
      <category term="源码学习" scheme="https://liuhao163.github.io/tags/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>ThreadLocal如何在子线程传递</title>
    <link href="https://liuhao163.github.io/ThreadLocal%E5%A6%82%E4%BD%95%E5%9C%A8%E5%AD%90%E7%BA%BF%E7%A8%8B%E4%BC%A0%E9%80%92/"/>
    <id>https://liuhao163.github.io/ThreadLocal如何在子线程传递/</id>
    <published>2021-11-01T20:37:23.000Z</published>
    <updated>2022-09-21T15:03:02.191Z</updated>
    
    <content type="html"><![CDATA[<p>主线程如何向自己创建的子线程传递ThreadLocal值，只需要创建InheritableThreadLocal值,实现原理如下：</p><p>InheritableThreadLocal覆写了它三个方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InheritableThreadLocal</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">ThreadLocal</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//创建线程时候，会调用该方法,见下面init</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> T <span class="title">childValue</span><span class="params">(T parentValue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> parentValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取Map时候，返回的是t.inheritableThreadLocals，见ThreadLocal操作值</span></span><br><span class="line">    <span class="function">ThreadLocalMap <span class="title">getMap</span><span class="params">(Thread t)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> t.inheritableThreadLocals;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//createMap时候，返回的是t.inheritableThreadLocals，见ThreadLocal操作值</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">createMap</span><span class="params">(Thread t, T firstValue)</span> </span>&#123;</span><br><span class="line">        t.inheritableThreadLocals = <span class="keyword">new</span> ThreadLocalMap(<span class="keyword">this</span>, firstValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>见子线程初始化过程,初始化时候如果当前线程inheritableThreadLocals不为空</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ThreadGroup g, Runnable target, String name,</span></span></span><br><span class="line"><span class="function"><span class="params">                  <span class="keyword">long</span> stackSize, AccessControlContext acc,</span></span></span><br><span class="line"><span class="function"><span class="params">                  <span class="keyword">boolean</span> inheritThreadLocals)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line">    <span class="keyword">if</span> (inheritThreadLocals &amp;&amp; parent.inheritableThreadLocals != <span class="keyword">null</span>)</span><br><span class="line">        <span class="comment">//这里初始的是this.inheritableThreadLocals</span></span><br><span class="line">        <span class="keyword">this</span>.inheritableThreadLocals =</span><br><span class="line">            ThreadLocal.createInheritedMap(parent.inheritableThreadLocals);</span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ThreadLocal.createInheritedMap会调用ThreadLocalMap(ThreadLocalMap parentMap)方法，</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">ThreadLocalMap</span><span class="params">(ThreadLocalMap parentMap)</span> </span>&#123;</span><br><span class="line">    Entry[] parentTable = parentMap.table;</span><br><span class="line">    <span class="keyword">int</span> len = parentTable.length;</span><br><span class="line">    setThreshold(len);</span><br><span class="line">    table = <span class="keyword">new</span> Entry[len];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len; j++) &#123;</span><br><span class="line">        Entry e = parentTable[j];</span><br><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">            ThreadLocal&lt;Object&gt; key = (ThreadLocal&lt;Object&gt;) e.get();</span><br><span class="line">            <span class="keyword">if</span> (key != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">//这里调用InheritableThreadLocal覆写的childValue，返回的是parent的value，将parent的值copy到子线程中</span></span><br><span class="line">                Object value = key.childValue(e.value);</span><br><span class="line">                Entry c = <span class="keyword">new</span> Entry(key, value);</span><br><span class="line">                <span class="keyword">int</span> h = key.threadLocalHashCode &amp; (len - <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">while</span> (table[h] != <span class="keyword">null</span>)</span><br><span class="line">                    h = nextIndex(h, len);</span><br><span class="line">                table[h] = c;</span><br><span class="line">                size++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么inheritableThreadLocals它什么时候不为空呢，见下面：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在set值时候判断ThreadLocalMap为空，调用InheritableThreadLocal.getMap方法返回当前线程的t.inheritableThreadLocals，否则初始化t.inheritableThreadLocals</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">    Thread t = Thread.currentThread();</span><br><span class="line">    ThreadLocalMap map = getMap(t);</span><br><span class="line">    <span class="keyword">if</span> (map != <span class="keyword">null</span>)</span><br><span class="line">        map.set(<span class="keyword">this</span>, value);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        createMap(t, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取的是t.inheritableThreadLocals的值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Thread t = Thread.currentThread();</span><br><span class="line">    ThreadLocalMap map = getMap(t);</span><br><span class="line">    <span class="keyword">if</span> (map != <span class="keyword">null</span>) &#123;</span><br><span class="line">        ThreadLocalMap.Entry e = map.getEntry(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">            T result = (T)e.value;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> setInitialValue();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除值实际上删除的t.inheritableThreadLocals</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ThreadLocalMap m = getMap(Thread.currentThread());</span><br><span class="line">    <span class="keyword">if</span> (m != <span class="keyword">null</span>)</span><br><span class="line">        m.remove(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;主线程如何向自己创建的子线程传递ThreadLocal值，只需要创建InheritableThreadLocal值,实现原理如下：&lt;/p&gt;
&lt;p&gt;InheritableThreadLocal覆写了它三个方法:&lt;/p&gt;
&lt;figure class=&quot;highlight jav
      
    
    </summary>
    
      <category term="经验积累" scheme="https://liuhao163.github.io/categories/%E7%BB%8F%E9%AA%8C%E7%A7%AF%E7%B4%AF/"/>
    
      <category term="工具" scheme="https://liuhao163.github.io/categories/%E7%BB%8F%E9%AA%8C%E7%A7%AF%E7%B4%AF/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="java" scheme="https://liuhao163.github.io/tags/java/"/>
    
      <category term="并发" scheme="https://liuhao163.github.io/tags/%E5%B9%B6%E5%8F%91/"/>
    
      <category term="案例分析" scheme="https://liuhao163.github.io/tags/%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>坑-下载文件，丢失文件格式和后缀</title>
    <link href="https://liuhao163.github.io/%E5%9D%91-%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6%EF%BC%8C%E4%B8%A2%E5%A4%B1%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F%E5%92%8C%E5%90%8E%E7%BC%80/"/>
    <id>https://liuhao163.github.io/坑-下载文件，丢失文件格式和后缀/</id>
    <published>2021-10-11T15:19:51.000Z</published>
    <updated>2022-09-21T15:03:02.224Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>将记录导出成excel供下载，生成xlsl以后下载文件会丢失文件格式，curl链接情况如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">bogon:~ liuhaoeric$ curl -vvv https:<span class="comment">//xxxxxx.xlsx -output xxxxx.xlsx </span></span><br><span class="line">.....</span><br><span class="line">&lt; Content-Disposition: inline; filename=<span class="string">"xxxxx"</span> <span class="comment">//上传时候需制定filename这就是下载的文件名，如果filename未制定文件后缀名下载就会丢失文件格式</span></span><br><span class="line"></span><br><span class="line">......</span><br></pre></td></tr></table></figure><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>上传时候指定filename时候xxxxx.xlsx</p><p>在curl发现代码已经变为如下所示，问题解决</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt; Content-Disposition: inline; filename=<span class="string">"xxxxx.xlsx"</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;原因&quot;&gt;&lt;a href=&quot;#原因&quot; class=&quot;headerlink&quot; title=&quot;原因&quot;&gt;&lt;/a&gt;原因&lt;/h2&gt;&lt;p&gt;将记录导出成excel供下载，生成xlsl以后下载文件会丢失文件格式，curl链接情况如下&lt;/p&gt;
&lt;figure class=&quot;highl
      
    
    </summary>
    
      <category term="经验积累" scheme="https://liuhao163.github.io/categories/%E7%BB%8F%E9%AA%8C%E7%A7%AF%E7%B4%AF/"/>
    
      <category term="工具" scheme="https://liuhao163.github.io/categories/%E7%BB%8F%E9%AA%8C%E7%A7%AF%E7%B4%AF/%E5%B7%A5%E5%85%B7/"/>
    
    
  </entry>
  
  <entry>
    <title>SSL的请求过程</title>
    <link href="https://liuhao163.github.io/SSL%E7%9A%84%E8%AF%B7%E6%B1%82%E8%BF%87%E7%A8%8B/"/>
    <id>https://liuhao163.github.io/SSL的请求过程/</id>
    <published>2021-08-13T15:22:02.000Z</published>
    <updated>2022-09-21T15:03:02.176Z</updated>
    
    <content type="html"><![CDATA[<h2 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h2><p>  公钥即证书：由服务端传递给客户端，用于客户端的CA证书校验合法性；非对称加密clientKey；<br>  CA证书：内置于系统中用于校验公钥的合法性<br>  私钥：服务端保存，用于非对称解密clientKey<br>  clientKey：公钥验证通过后由浏览器生成clientKey通过对称加密和服务端进行交互</p><h2 id="发送请求的过程"><a href="#发送请求的过程" class="headerlink" title="发送请求的过程"></a>发送请求的过程</h2><ol><li>浏览器发送请求给服务端，这时候端口是443；</li><li>服务端返回公钥【证书】给客户端；</li><li>浏览器通过系统内置的CA证书验证证书的合法性，如果不合法请求终止；</li><li>浏览器生成clientKey明文，并且用公钥加密clientKey，发送密文的clientKey给服务端；</li><li>服务端得到加密过的公钥，用私钥解密，获取明文clientKey；</li><li>浏览器用clientKey通过对称加密方式通信：<ol><li>浏览器通过clientKey加密请求，发送给服务端；</li><li>服务端通过clientKey解密请求，并且将响应用clientKey加密发给浏览器；</li><li>浏览器接到密文响应，用clientKey解密；</li></ol></li></ol><h2 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h2><p><img src="/SSL的请求过程/img.png" alt="avator"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;名词解释&quot;&gt;&lt;a href=&quot;#名词解释&quot; class=&quot;headerlink&quot; title=&quot;名词解释&quot;&gt;&lt;/a&gt;名词解释&lt;/h2&gt;&lt;p&gt;  公钥即证书：由服务端传递给客户端，用于客户端的CA证书校验合法性；非对称加密clientKey；&lt;br&gt;  CA证书：内
      
    
    </summary>
    
      <category term="经验积累" scheme="https://liuhao163.github.io/categories/%E7%BB%8F%E9%AA%8C%E7%A7%AF%E7%B4%AF/"/>
    
      <category term="工具" scheme="https://liuhao163.github.io/categories/%E7%BB%8F%E9%AA%8C%E7%A7%AF%E7%B4%AF/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="协议、知识积累" scheme="https://liuhao163.github.io/tags/%E5%8D%8F%E8%AE%AE%E3%80%81%E7%9F%A5%E8%AF%86%E7%A7%AF%E7%B4%AF/"/>
    
  </entry>
  
  <entry>
    <title>如何保证缓存和数据库的数据一致</title>
    <link href="https://liuhao163.github.io/%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E7%BC%93%E5%AD%98%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E6%95%B0%E6%8D%AE%E4%B8%80%E8%87%B4/"/>
    <id>https://liuhao163.github.io/如何保证缓存和数据库的数据一致/</id>
    <published>2021-06-25T00:00:00.000Z</published>
    <updated>2022-09-21T15:03:02.226Z</updated>
    
    <content type="html"><![CDATA[<p>  本篇文章主要讨论常见的集中缓存的使用方案，以及如何解决数据和缓存的一致性</p><h2 id="常见的缓存模式"><a href="#常见的缓存模式" class="headerlink" title="常见的缓存模式"></a>常见的缓存模式</h2><h3 id="Cache-Aside-Pattern"><a href="#Cache-Aside-Pattern" class="headerlink" title="Cache-Aside Pattern"></a>Cache-Aside Pattern</h3><p>我们常见的缓存方案，可以说我们大部分都采用这种方案，见下面:</p><p><img src="/如何保证缓存和数据库的数据一致/Cache-Aside Pattern.jpg" alt="avator"></p><h3 id="Read-Through-Write-through（读写穿透）"><a href="#Read-Through-Write-through（读写穿透）" class="headerlink" title="Read-Through/Write through（读写穿透）"></a>Read-Through/Write through（读写穿透）</h3><p>本质上和Cache-Aside Pattern类似，只是在程序和缓存中增加了一层Cache Provider，读写如果未命中由Cache Proxy来负责和缓存交互。减少程序开发的复杂性，需要中间件支持</p><h4 id="Read-Through"><a href="#Read-Through" class="headerlink" title="Read-Through"></a>Read-Through</h4><p><img src="/如何保证缓存和数据库的数据一致/Read-Through.jpg" alt="avator"></p><h4 id="Write-through"><a href="#Write-through" class="headerlink" title="Write through"></a>Write through</h4><p><img src="/如何保证缓存和数据库的数据一致/Write-Through.jpg" alt="avator"></p><h3 id="Write-behind"><a href="#Write-behind" class="headerlink" title="Write behind"></a>Write behind</h3><p>和Read-Through/Write through类似，区别是Write behind模式下，数据都是写到Cache Provider，由Cache Provider异步的刷到数据库中，听着是不是很熟悉，对Mysql的WAL异步刷盘就是这种模式</p><p><img src="/如何保证缓存和数据库的数据一致/Write-Behind.jpg" alt="avator"></p><h2 id="如何保证缓存和数据库的数据一致"><a href="#如何保证缓存和数据库的数据一致" class="headerlink" title="如何保证缓存和数据库的数据一致"></a>如何保证缓存和数据库的数据一致</h2><p>这里是以常见的Cache-Aside Pattern来讨论，正确操作缓存的姿势是</p><p><img src="/如何保证缓存和数据库的数据一致/Cache-Update.jpg" alt="avator"></p><p>这里要注意俩点</p><h3 id="不是更新缓存而是要删除缓存"><a href="#不是更新缓存而是要删除缓存" class="headerlink" title="不是更新缓存而是要删除缓存"></a>不是更新缓存而是要删除缓存</h3><p>如果更新缓存不是删除缓存在并发场景下会出现脏数据里有如下：</p><p><img src="/如何保证缓存和数据库的数据一致/Cache-Update-Dirty.jpg" alt="avator"></p><ol><li>线程A先发起一个写操作，第一步先更新数据库</li><li>线程B再发起一个写操作，第二步更新了数据库</li><li>由于网络等原因，线程B先更新了缓存</li><li>线程A更新缓存。</li></ol><p>这时DB是B操作后的数据，缓存是A操作的数据</p><h3 id="要先操作数据库而不是先操作缓存"><a href="#要先操作数据库而不是先操作缓存" class="headerlink" title="要先操作数据库而不是先操作缓存"></a>要先操作数据库而不是先操作缓存</h3><p>如果先操作缓存不是先操作数据库会在并发场景下会出现脏数据里有如下：</p><p><img src="/如何保证缓存和数据库的数据一致/Cache-Write-Dirty.jpg" alt="avator"></p><ol><li>线程A发起一个写操作，第一步del cache</li><li>此时线程B发起一个读操作，cache miss</li><li>线程B继续读DB，读出来一个老数据</li><li>然后线程B把老数据设置入cache</li><li>线程A写入DB最新的数据</li></ol><p>这时DB是A操作后的数据，缓存是B操作后的数据。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;  本篇文章主要讨论常见的集中缓存的使用方案，以及如何解决数据和缓存的一致性&lt;/p&gt;
&lt;h2 id=&quot;常见的缓存模式&quot;&gt;&lt;a href=&quot;#常见的缓存模式&quot; class=&quot;headerlink&quot; title=&quot;常见的缓存模式&quot;&gt;&lt;/a&gt;常见的缓存模式&lt;/h2&gt;&lt;h3 id=
      
    
    </summary>
    
      <category term="经验积累" scheme="https://liuhao163.github.io/categories/%E7%BB%8F%E9%AA%8C%E7%A7%AF%E7%B4%AF/"/>
    
      <category term="项目积累" scheme="https://liuhao163.github.io/categories/%E7%BB%8F%E9%AA%8C%E7%A7%AF%E7%B4%AF/%E9%A1%B9%E7%9B%AE%E7%A7%AF%E7%B4%AF/"/>
    
    
      <category term="缓存" scheme="https://liuhao163.github.io/tags/%E7%BC%93%E5%AD%98/"/>
    
      <category term="数据一致性" scheme="https://liuhao163.github.io/tags/%E6%95%B0%E6%8D%AE%E4%B8%80%E8%87%B4%E6%80%A7/"/>
    
  </entry>
  
  <entry>
    <title>Spring事务-事务传播级别</title>
    <link href="https://liuhao163.github.io/Spring%E4%BA%8B%E5%8A%A1-%E4%BA%8B%E5%8A%A1%E4%BC%A0%E6%92%AD%E7%BA%A7%E5%88%AB/"/>
    <id>https://liuhao163.github.io/Spring事务-事务传播级别/</id>
    <published>2021-06-22T20:30:37.000Z</published>
    <updated>2022-09-21T15:03:02.182Z</updated>
    
    <content type="html"><![CDATA[<p>  事务是逻辑处理原子性的保证手段，通过使用事务控制，可以极大的避免出现逻辑处理失败导致的脏数据等问题。<br>  事务最重要的两个特性，是事务的传播级别和数据隔离级别。传播级别定义的是事务的控制范围，事务隔离级别定义的是事务在数据库读写方面的控制范围。</p><p>  在spring中我们对事务的定义主要是通过注解@Transactional,控制传播级别的就是参数propagation是一个Propagation的枚举有如下的值</p><h2 id="REQUIRED（PROPAGATION-REQUIRED）"><a href="#REQUIRED（PROPAGATION-REQUIRED）" class="headerlink" title="REQUIRED（PROPAGATION_REQUIRED）"></a>REQUIRED（PROPAGATION_REQUIRED）</h2><p>默认的spring事务传播级别，使用该级别的特点是，如果上下文中已经存在事务，那么就加入到事务中执行，如果当前上下文中不存在事务，则新建事务执行。所以这个级别通常能满足处理大多数的业务场景。</p><p>即，当前的事务如果没有运行在@Transactional注解的方法中，新建一个事务，如果运行在一个@Transactional注解的方法中则加入当前事务，一旦出现异常，会连调用者的事务一起回滚。</p><h2 id="SUPPORTS（PROPAGATION-SUPPORTS）"><a href="#SUPPORTS（PROPAGATION-SUPPORTS）" class="headerlink" title="SUPPORTS（PROPAGATION_SUPPORTS）"></a>SUPPORTS（PROPAGATION_SUPPORTS）</h2><p>从字面意思就知道，supports，支持，该传播级别的特点是，如果上下文存在事务，则支持事务加入事务，如果没有事务，则使用非事务的方式执行。所以说，并非所有的包在transactionTemplate.execute中的代码都会有事务支持。这个通常是用来处理那些并非原子性的非核心业务逻辑操作。应用场景较少。</p><p>即，当前的事务如果没有运行在@Transactional注解的方法中，则没有事务，如果运行在一个@Transactional注解的方法中则加入当前事务，一旦出现异常，会连调用者的事务一起回滚。</p><h2 id="MANDATORY（PROPAGATION-MANDATORY）"><a href="#MANDATORY（PROPAGATION-MANDATORY）" class="headerlink" title="MANDATORY（PROPAGATION_MANDATORY）"></a>MANDATORY（PROPAGATION_MANDATORY）</h2><p>该级别的事务要求上下文中必须要存在事务，否则就会抛出异常！配置该方式的传播级别是有效的控制上下文调用代码遗漏添加事务控制的保证手段。比如一段代码不能单独被调用执行，但是一旦被调用，就必须有事务包含的情况，就可以使用这个传播级别。</p><p>即，当前的方法必须运行在有@Transactional注解的方法种，否则会抛出异常，和NEVER相反。</p><h2 id="REQUIRES-NEW（PROPAGATION-REQUIRES-NEW）"><a href="#REQUIRES-NEW（PROPAGATION-REQUIRES-NEW）" class="headerlink" title="REQUIRES_NEW（PROPAGATION_REQUIRES_NEW）"></a>REQUIRES_NEW（PROPAGATION_REQUIRES_NEW）</h2><p>从字面即可知道，new，每次都要一个新事务，该传播级别的特点是，每次都会新建一个事务，并且同时将上下文中的事务挂起，执行当前新建事务完成以后，上下文事务恢复再执行。</p><p>即，当前的方法单独运行会以事务方式运行，在@Transactional注解的方法中运行，运行到该方法时候回将当前事务挂起，新建一个事务运行，一旦出现异常，只会回滚该方法的事务，不会回滚调用者的事务。</p><p>这是一个很有用的传播级别，举一个应用场景：现在有一个发送100个红包的操作，在发送之前，要做一些系统的初始化、验证、数据记录操作，然后发送100封红包，然后再记录发送日志，发送日志要求100%的准确，如果日志不准确，那么整个父事务逻辑需要回滚。<br>怎么处理整个业务需求呢？就是通过这个PROPAGATION_REQUIRES_NEW 级别的事务传播控制就可以完成。发送红包的子事务不会直接影响到父事务的提交和回滚。</p><h2 id="NOT-SUPPORTED（PROPAGATION-NOT-SUPPORTED）"><a href="#NOT-SUPPORTED（PROPAGATION-NOT-SUPPORTED）" class="headerlink" title="NOT_SUPPORTED（PROPAGATION_NOT_SUPPORTED）"></a>NOT_SUPPORTED（PROPAGATION_NOT_SUPPORTED）</h2><p>这个也可以从字面得知，not supported ，不支持，当前级别的特点就是上下文中存在事务，则挂起事务，执行当前逻辑，结束后恢复上下文的事务。</p><p>即，当前方法单独运行不会以事务方法运行，如果运行在在@Transactional注解的方法中，运行到该方法时候会将当前事务挂起，以非事务的方式执行该方法在恢复事务</p><p>这个级别有什么好处？可以帮助你将事务极可能的缩小。我们知道一个事务越大，它存在的风险也就越多。所以在处理事务的过程中，要保证尽可能的缩小范围。比如一段代码，是每次逻辑操作都必须调用的，比如循环1000次的某个非核心业务逻辑操作。这样的代码如果包在事务中，势必造成事务太大，导致出现一些难以考虑周全的异常情况。所以这个事务这个级别的传播级别就派上用场了。用当前级别的事务模板抱起来就可以了。</p><h2 id="NEVER（PROPAGATION-NEVER）"><a href="#NEVER（PROPAGATION-NEVER）" class="headerlink" title="NEVER（PROPAGATION_NEVER）"></a>NEVER（PROPAGATION_NEVER）</h2><p>该事务更严格，上面一个事务传播级别只是不支持而已，有事务就挂起，而PROPAGATION_NEVER传播级别要求上下文中不能存在事务，一旦有事务，就抛出runtime异常，强制停止执行！这个级别上辈子跟事务有仇。</p><p>即，该方法不能运行在注解@Transactional的方法中，和MANDATORY相反</p><h2 id="NESTED（PROPAGATION-NESTED）"><a href="#NESTED（PROPAGATION-NESTED）" class="headerlink" title="NESTED（PROPAGATION_NESTED）"></a>NESTED（PROPAGATION_NESTED）</h2><p>字面也可知道，nested，嵌套级别事务。该传播级别特征是，如果上下文中存在事务，则嵌套事务执行，如果不存在事务，则新建事务。</p><p>即：和REQUIRED（PROPAGATION_REQUIRED）类似，很少见</p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p>测试代码见：<a href="https://gitee.com/liuhao163/test-transational" target="_blank" rel="noopener">https://gitee.com/liuhao163/test-transational</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;  事务是逻辑处理原子性的保证手段，通过使用事务控制，可以极大的避免出现逻辑处理失败导致的脏数据等问题。&lt;br&gt;  事务最重要的两个特性，是事务的传播级别和数据隔离级别。传播级别定义的是事务的控制范围，事务隔离级别定义的是事务在数据库读写方面的控制范围。&lt;/p&gt;
&lt;p&gt;  
      
    
    </summary>
    
      <category term="java" scheme="https://liuhao163.github.io/categories/java/"/>
    
      <category term="spring" scheme="https://liuhao163.github.io/categories/java/spring/"/>
    
      <category term="事务" scheme="https://liuhao163.github.io/categories/java/spring/%E4%BA%8B%E5%8A%A1/"/>
    
    
      <category term="java" scheme="https://liuhao163.github.io/tags/java/"/>
    
      <category term="spring" scheme="https://liuhao163.github.io/tags/spring/"/>
    
      <category term="框架" scheme="https://liuhao163.github.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>重构-为什么要重构以及代码中的坏味道</title>
    <link href="https://liuhao163.github.io/%E9%87%8D%E6%9E%84-%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E9%87%8D%E6%9E%84%E4%BB%A5%E5%8F%8A%E4%BB%A3%E7%A0%81%E4%B8%AD%E7%9A%84%E5%9D%8F%E5%91%B3%E9%81%93/"/>
    <id>https://liuhao163.github.io/重构-为什么要重构以及代码中的坏味道/</id>
    <published>2021-06-02T22:30:23.000Z</published>
    <updated>2022-09-21T15:03:02.381Z</updated>
    
    <content type="html"><![CDATA[<h2 id="重构指什么"><a href="#重构指什么" class="headerlink" title="重构指什么"></a>重构指什么</h2><p>  这里的 <strong>重构行为</strong> 是指在不改变软件功能的前提下，通过一些 <strong>重构手段</strong> 调整代码结构使其更易维护、代码更加健壮，并且能有效降低项目的学习成本。</p><p>  为何重构</p><ul><li>改进软件设计</li><li>使软件更易读</li><li>帮助解决一些诡异的BUG</li><li>提高变成速度</li></ul><h2 id="重构的时机很重要"><a href="#重构的时机很重要" class="headerlink" title="重构的时机很重要"></a>重构的时机很重要</h2><p>  我们何时重构呢？一般来说，我们很难说找到一个比较长的周期什么事都不做，只重构。那么重构应该就穿插在我们日常工作中。</p><ul><li>预备性重构：添加新的功能之前做技术设计，发现这部分代码设计的不够合理我们可以在这时候进行该功能的重构</li><li>帮助理解的重构：当我读不懂这段代码的时候，我就要考虑进行重构，或者说的极限点，当我觉得这部分代码需要些注释才能解释明白的时候我可以考虑进行重构</li><li>捡垃圾式的重构：在读代码时候发现这段代码逻辑相同，或者结构迂回有问题</li><li>有计划的重构和见机行事的重构：在写新功能时候顺手就把不合理的代码改掉</li><li>长期重构：一些比较大的架构需要调整的视乎</li><li><p>review时候重构</p><p>另外重构尽量在程序员之间内部闭环少让产品、项目经理参与他们可能出于成本考虑阻碍重构，另外重新比重构划算时候就重写吧</p></li></ul><h2 id="重构的挑战是什么"><a href="#重构的挑战是什么" class="headerlink" title="重构的挑战是什么"></a>重构的挑战是什么</h2><ul><li>延缓新功能开发：如果一块代码被封装隔离起来了，即便写的很糟只要你不用理解它你就可以不重构它</li><li>代码所有权：一旦接口发布出去了就不好在重构了，否则需要做大量兼容工作</li><li>分支：主干发布，分支开发这种会导致，merge地狱出现</li><li>测试：重构要提前想好测试方案，减少出现BUG的几率</li><li>遗留代码：祖传代码没人敢动，还是提前准备充足测试方案</li><li>数据库的重构：做好版本管理，将改动合并到代码库中便于回滚</li></ul><h2 id="代码有哪些坏味道"><a href="#代码有哪些坏味道" class="headerlink" title="代码有哪些坏味道"></a>代码有哪些坏味道</h2><p>  在我们工程的代码中出现如下的情况，会使我们的代码产生坏的味道入股不管，这些坏味道很快就会让我们的工程腐败，所以我们可以考虑对这些地方进行进行重构。</p><h3 id="神秘命名"><a href="#神秘命名" class="headerlink" title="神秘命名"></a>神秘命名</h3><p>  当我们发现我们对方法或者函数命名不够准确，很难理解这时候我们应该考虑架构是否合理，代码结构是否应该调整。</p><p>  解决方法：</p><ol><li>改变函数声明</li><li>字段改名</li><li>变量改名</li></ol><h3 id="重复代码"><a href="#重复代码" class="headerlink" title="重复代码"></a>重复代码</h3><p>  在一个地方看到相同的代码结构，导致后期维护需要维护多个副本</p><p>  解决方法：</p><ol><li>提炼函数</li><li>如果只是相似而不是相同，我们可以先 <strong>移动语句</strong> 重组代码顺序</li><li>如果重复代码在不同的子类中，我们可以用 <strong>函数上移</strong> 将代码放到父类中</li></ol><h3 id="过长函数"><a href="#过长函数" class="headerlink" title="过长函数"></a>过长函数</h3><p>  过长的函数会导致代码很难理解</p><p>  解决方法：</p><ol><li>提炼函数，拆分成多个小函数</li><li>以查询取代临时变量，减少难以理解的临时变量</li><li>引入参数对象、保持参数完整性，减少过长的参数列表</li><li>如果还有_太多参数和临时变量，我们可以以 <strong>以命令取代函数</strong> 将这个长的函数封装成一个命令类，构造函数是参数</li><li>对于循环 <strong>拆分循环</strong> ,对于条件表达式可以 <strong>分解条件表达式</strong>，或者以 <strong>多态处理</strong></li></ol><h3 id="过长参数列表"><a href="#过长参数列表" class="headerlink" title="过长参数列表"></a>过长参数列表</h3><p>  危害同上</p><p>  解决方法：</p><ol><li>假设参数列表中的一个参数，是通过另一个参数求解出来的，我们可以用 <strong>已查询取代参数</strong> 来去掉这个参数</li><li>保持参数完整性</li><li>已入参数对象</li><li>移除标记参数</li><li>如果多个函数引用相同的参数列表，可以 <strong>函数组合成类</strong></li></ol><h3 id="全局数据"><a href="#全局数据" class="headerlink" title="全局数据"></a>全局数据</h3><p>  如果没有对数据的修改封装，很可能会造成系统BUG</p><p>  解决方案</p><ol><li>少用，如果必须要用缩短其作用域（包级别调用）</li><li>封装变量</li></ol><h3 id="可变数据"><a href="#可变数据" class="headerlink" title="可变数据"></a>可变数据</h3><p>  对数据的修改很可能会导致BUG，同上</p><p>  解决方案</p><ol><li>封装变量</li><li>拆分变量</li><li>移动语句，提炼函数</li><li>将查询函数和修改函数分离</li><li>移除设值函数</li><li>如果可变数据能在其他地方计算出来，我们可以 <strong>查询取代派生变量</strong> 即：字段只没有变，每次返回的都是计算过程</li><li>函数组合成类、函数组合成变换、引用对象改为值对象</li></ol><h3 id="发散式变化"><a href="#发散式变化" class="headerlink" title="发散式变化"></a>发散式变化</h3><p>  某个模块因为不同的原因在不同的地方发生变化，最终导致这个模块无法维护，这个其实违反了地耦合的原则，一个类应该指关心自己的上下文。</p><p>  解决方案</p><ol><li>先用拆分阶段将两者拆分、然后用搬移函数将处理逻辑分开。</li><li>如果函数内部混合了俩类处理逻辑、先提炼函数讲起拆分，如果是以类的方式定义的可以用提炼类来做拆分</li></ol><h3 id="霰弹式修改"><a href="#霰弹式修改" class="headerlink" title="霰弹式修改"></a>霰弹式修改</h3><p>  如果每次修改一个地方，都需要在很多其他类中做修改，这个其实违反了高内聚的原则。</p><p>  解决方案</p><ol><li>搬移函数或者搬移字段把要修改的代码放在同一个模块</li><li>如果有很多函数都在操作想死的数据，可以使用 <strong>函数组合</strong></li><li>如果优先函数是功能转换或者数据填充，可以使用 <strong>函数组合成变换</strong></li><li>如果一些函数输出可以组合后提供给一段专门使用这些计算结果的逻辑，可以使用 <strong>拆分阶段</strong></li><li>一个常用策略是 <strong>内联函数</strong> 或者是 <strong>内连类</strong> 将不该分散的逻辑拽到一起。</li></ol><h3 id="依恋情节"><a href="#依恋情节" class="headerlink" title="依恋情节"></a>依恋情节</h3><p>todo</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;重构指什么&quot;&gt;&lt;a href=&quot;#重构指什么&quot; class=&quot;headerlink&quot; title=&quot;重构指什么&quot;&gt;&lt;/a&gt;重构指什么&lt;/h2&gt;&lt;p&gt;  这里的 &lt;strong&gt;重构行为&lt;/strong&gt; 是指在不改变软件功能的前提下，通过一些 &lt;strong&gt;重构
      
    
    </summary>
    
      <category term="重构" scheme="https://liuhao163.github.io/categories/%E9%87%8D%E6%9E%84/"/>
    
    
      <category term="方法论" scheme="https://liuhao163.github.io/tags/%E6%96%B9%E6%B3%95%E8%AE%BA/"/>
    
      <category term="重构" scheme="https://liuhao163.github.io/tags/%E9%87%8D%E6%9E%84/"/>
    
      <category term="代码优化" scheme="https://liuhao163.github.io/tags/%E4%BB%A3%E7%A0%81%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>记一次安装opencv和gocv踩过的坑</title>
    <link href="https://liuhao163.github.io/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%AE%89%E8%A3%85opencv%E5%92%8Cgocv%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91/"/>
    <id>https://liuhao163.github.io/记一次安装opencv和gocv踩过的坑/</id>
    <published>2020-12-07T22:24:49.000Z</published>
    <updated>2022-09-21T15:03:02.378Z</updated>
    
    <content type="html"><![CDATA[<p>  最近负责一个项目将人脸算法工程，和人脸后端工程集成到一个arm架构的小型盒子中。我主要负责后端工程这部分，语言栈是golang,通过gocv调用opencv【ffmpeg】拉取rtsp视频流到本地抽帧进行人脸的比对。</p><p>  这其中涉及到gocv+opencv，由于盒子的的架构比较特殊切公司出于安全原因无法连接外网，大部分依赖只能通过源码编译，我踩了不少的坑特此记录</p><h2 id="如何安装ffmpeg"><a href="#如何安装ffmpeg" class="headerlink" title="如何安装ffmpeg"></a>如何安装ffmpeg</h2><p>  所以我马上手动编译ffmpeg，一般我们都可以用yum安装，但是这里不能联网只能源码安装</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ffmpeg</span><br><span class="line">./configure --<span class="built_in">enable</span>-shared --<span class="built_in">enable</span>-swscale --<span class="built_in">enable</span>-gpl --<span class="built_in">enable</span>-nonfree --<span class="built_in">enable</span>-pic --prefix=/usr/<span class="built_in">local</span>/ffmpeg --<span class="built_in">enable</span>-version3 --<span class="built_in">enable</span>-postproc --<span class="built_in">enable</span>-pthreads --<span class="built_in">enable</span>-avisynth</span><br><span class="line"></span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h2 id="如何编译opencv"><a href="#如何编译opencv" class="headerlink" title="如何编译opencv"></a>如何编译opencv</h2><p>  下载opencv，注意版本，当前gocv的依赖库制定的是opencv4.5.0</p><p>  注意安装opencv需要cmake3</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> opencv-<span class="variable">$&#123;OPENCV_VERSION&#125;</span> <span class="comment">#这里进入opencv目录</span></span><br><span class="line">mkdir build</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line">cmake3 -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/<span class="built_in">local</span> -DOPENCV_EXTRA_MODULES_PATH=../../opencv_contrib-<span class="variable">$&#123;OPENCV_VERSION&#125;</span>/modules -DOPENCV_GENERATE_PKGCONFIG=ON -DWITH_FFMPEG=on ..</span><br><span class="line">make -j <span class="variable">$proc</span></span><br><span class="line">make install</span><br></pre></td></tr></table></figure><ul><li>CMAKE_INSTALL_PREFIX 安装目录</li><li>OPENCV_EXTRA_MODULES_PATH 制定的一些插件目录这里用不到</li><li>OPENCV_GENERATE_PKGCONFIG 编译golang的程序时候gocv检查依赖是通过pkg-config所以要安装，会生成<em>.pc文件，之后我们可以将</em>.pc文件放到pkg-config，后面会讲到如何放</li><li>WITH_FFMPEG 处理视频流的解码要依赖</li></ul><h2 id="安装opencv-执行cmake3时候解决FFMPEG-NO"><a href="#安装opencv-执行cmake3时候解决FFMPEG-NO" class="headerlink" title="安装opencv,执行cmake3时候解决FFMPEG NO"></a>安装opencv,执行cmake3时候解决FFMPEG NO</h2><p>  我在编译opencv4.5.0，执行cmake时候发现ffmpeg总是no，导致程序启动时候无法顺利拉流下来提示Error read file :xxxx这是由于安装opencv时候check依赖ffmpeg失败导致的。原来opencv检查ffpmeg是通过pkg-config的，所以</p><p>  解决方案：我们需要将刚才编译的ffmpeg下的*.pc都拷贝到pkg-config指定的目录中</p><h2 id="指定pkg-config"><a href="#指定pkg-config" class="headerlink" title="指定pkg-config"></a>指定pkg-config</h2><p>  我们在编译golang程序时候有可能会失败，指找不到opencv库，有可能是pkg-config加载失败导致的解决方案</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PKG_CONFIG_PATH=&lt;存放*.pc的目录，一般是xxx/pkgconfig&gt;:<span class="variable">$PKG_CONFIG_PATH</span></span><br><span class="line">pkg-config --cflags  -- opencv4  <span class="comment">#测试opencv4</span></span><br></pre></td></tr></table></figure><h2 id="加载动态链接库"><a href="#加载动态链接库" class="headerlink" title="加载动态链接库"></a>加载动态链接库</h2><p>如果想让系统找到opencv库文件需要这么做</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/ld.so.conf.d</span><br><span class="line">touch OpenCV.conf</span><br><span class="line"><span class="built_in">echo</span> &lt;libopenxxx.so所在的补录，这里一般是/usr/<span class="built_in">local</span>/lib &gt; OpenCV.conf</span><br><span class="line">ldconfig</span><br></pre></td></tr></table></figure><h2 id="编译golang程序"><a href="#编译golang程序" class="headerlink" title="编译golang程序"></a>编译golang程序</h2><p>  以为没法连外网所以把源码和依赖拷贝到盒子中</p><p>  下载依赖</p><ul><li>go mod tidy</li><li><p>go mod vendor</p><p>编译</p></li><li><p>go build -mod vendor</p></li></ul><p>至此，基本上坑都踩过了，特此记录。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;  最近负责一个项目将人脸算法工程，和人脸后端工程集成到一个arm架构的小型盒子中。我主要负责后端工程这部分，语言栈是golang,通过gocv调用opencv【ffmpeg】拉取rtsp视频流到本地抽帧进行人脸的比对。&lt;/p&gt;
&lt;p&gt;  这其中涉及到gocv+opencv
      
    
    </summary>
    
      <category term="经验积累" scheme="https://liuhao163.github.io/categories/%E7%BB%8F%E9%AA%8C%E7%A7%AF%E7%B4%AF/"/>
    
      <category term="项目积累" scheme="https://liuhao163.github.io/categories/%E7%BB%8F%E9%AA%8C%E7%A7%AF%E7%B4%AF/%E9%A1%B9%E7%9B%AE%E7%A7%AF%E7%B4%AF/"/>
    
    
      <category term="golang" scheme="https://liuhao163.github.io/tags/golang/"/>
    
      <category term="opencv" scheme="https://liuhao163.github.io/tags/opencv/"/>
    
  </entry>
  
  <entry>
    <title>Spring源码-工具-EmbeddedValueResolverAware</title>
    <link href="https://liuhao163.github.io/Spring%E6%BA%90%E7%A0%81-%E5%B7%A5%E5%85%B7-EmbeddedValueResolverAware/"/>
    <id>https://liuhao163.github.io/Spring源码-工具-EmbeddedValueResolverAware/</id>
    <published>2020-10-15T14:46:56.000Z</published>
    <updated>2022-09-21T15:03:02.188Z</updated>
    
    <content type="html"><![CDATA[<p>todo</p><p>读取配置文件的配置用</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;todo&lt;/p&gt;
&lt;p&gt;读取配置文件的配置用&lt;/p&gt;

      
    
    </summary>
    
      <category term="java" scheme="https://liuhao163.github.io/categories/java/"/>
    
      <category term="spring" scheme="https://liuhao163.github.io/categories/java/spring/"/>
    
      <category term="工具" scheme="https://liuhao163.github.io/categories/java/spring/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="java" scheme="https://liuhao163.github.io/tags/java/"/>
    
      <category term="源码" scheme="https://liuhao163.github.io/tags/%E6%BA%90%E7%A0%81/"/>
    
      <category term="spring" scheme="https://liuhao163.github.io/tags/spring/"/>
    
      <category term="框架" scheme="https://liuhao163.github.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>SpringMvc源码-RequestMappingHandlerMapping</title>
    <link href="https://liuhao163.github.io/SpringMvc%E6%BA%90%E7%A0%81-RequestMappingHandlerMapping/"/>
    <id>https://liuhao163.github.io/SpringMvc源码-RequestMappingHandlerMapping/</id>
    <published>2020-10-13T20:44:13.000Z</published>
    <updated>2022-09-21T15:03:02.181Z</updated>
    
    <content type="html"><![CDATA[<p>RequestMappingHandlerMapping负责将RequestMapping注解的方法与url关联起来，并且返回HandlerExecutionChain</p><h2 id="加载过程"><a href="#加载过程" class="headerlink" title="加载过程"></a>加载过程</h2><p>  DispatcherServlet.initStrategies的initHandlerMappings方法中会通过读取DispatchServerlet.proeprties对HandlerMapping进行初始化，这里重点看RequestMappingHandlerMapping类</p><p>  DispatcherServlet.properties的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.web.servlet.HandlerMapping=org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping,\</span><br><span class="line">org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping,\</span><br><span class="line">org.springframework.web.servlet.function.support.RouterFunctionMapping</span><br></pre></td></tr></table></figure><h2 id="初始化HandlerMapping"><a href="#初始化HandlerMapping" class="headerlink" title="初始化HandlerMapping"></a>初始化HandlerMapping</h2><p>  HandlerMapping，封装了是request与他的处理类HandlerMethod的映射关系，他的职责主要是通过request找到对应的handlerMapping</p><p>  AbstractHandlerMethodMapping实现了InitializingBean所以在afterPropertiesSet会进行初始化工作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//调用initHandlerMethods</span></span><br><span class="line">initHandlerMethods();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//从ApplicationContext扫描所有的bean, 找到并且将handler method注册到容器中【将url和handlerMethod关联】</span></span><br><span class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initHandlerMethods</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//获取application中所有的bean</span></span><br><span class="line"><span class="keyword">for</span> (String beanName : getCandidateBeanNames()) &#123;</span><br><span class="line"><span class="keyword">if</span> (!beanName.startsWith(SCOPED_TARGET_NAME_PREFIX)) &#123;</span><br><span class="line">       <span class="comment">//重点方法</span></span><br><span class="line">processCandidateBean(beanName);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">handlerMethodsInitialized(getHandlerMethods());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="重点方法：processCandidateBean"><a href="#重点方法：processCandidateBean" class="headerlink" title="重点方法：processCandidateBean"></a>重点方法：processCandidateBean</h3><p>  根据bean找到method，封装成handlerMethod注册到容器中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">processCandidateBean</span><span class="params">(String beanName)</span> </span>&#123;</span><br><span class="line">Class&lt;?&gt; beanType = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">beanType = obtainApplicationContext().getType(beanName);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line"><span class="comment">// An unresolvable bean type, probably from a lazy bean - let's ignore it.</span></span><br><span class="line"><span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">logger.trace(<span class="string">"Could not resolve type for bean '"</span> + beanName + <span class="string">"'"</span>, ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这里isHandler判断beanType是否是一个Controller【判断是否有@Controller和@RequestMapping注解】</span></span><br><span class="line"><span class="keyword">if</span> (beanType != <span class="keyword">null</span> &amp;&amp; isHandler(beanType)) &#123;</span><br><span class="line">     <span class="comment">//重点方法</span></span><br><span class="line">detectHandlerMethods(beanName);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="重点方法"><a href="#重点方法" class="headerlink" title="重点方法"></a>重点方法</h3><p>  detectHandlerMethods遍历bean的method方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">detectHandlerMethods</span><span class="params">(Object handler)</span> </span>&#123;</span><br><span class="line">Class&lt;?&gt; handlerType = (handler <span class="keyword">instanceof</span> String ?</span><br><span class="line">obtainApplicationContext().getType((String) handler) : handler.getClass());</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (handlerType != <span class="keyword">null</span>) &#123;</span><br><span class="line">Class&lt;?&gt; userType = ClassUtils.getUserClass(handlerType);</span><br><span class="line"><span class="comment">//遍历handler中的方法，通过getMappingForMethod返回RequestMappingInfo</span></span><br><span class="line"><span class="comment">// 通过方法上的RequestMapping注解,生成RequestMappingInfo，并且和Method关联</span></span><br><span class="line">Map&lt;Method, T&gt; methods = MethodIntrospector.selectMethods(userType,</span><br><span class="line">(MethodIntrospector.MetadataLookup&lt;T&gt;) method -&gt; &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">return</span> getMappingForMethod(method, userType);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Invalid mapping on handler class ["</span> +</span><br><span class="line">userType.getName() + <span class="string">"]: "</span> + method, ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">logger.trace(formatMappings(userType, methods));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历method--&gt;RequestMappingInfo 并且将method和mapping注册到 mappingRegistry中RequestMappingHandlerMapping对其进行了改写</span></span><br><span class="line">methods.forEach((method, mapping) -&gt; &#123;</span><br><span class="line">Method invocableMethod = AopUtils.selectInvocableMethod(method, userType);</span><br><span class="line">registerHandlerMethod(handler, invocableMethod, mapping);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="重点方法：registerHandlerMethod-handler-invocableMethod-mapping"><a href="#重点方法：registerHandlerMethod-handler-invocableMethod-mapping" class="headerlink" title="重点方法：registerHandlerMethod(handler, invocableMethod, mapping)"></a>重点方法：registerHandlerMethod(handler, invocableMethod, mapping)</h3><p>  向容器注册HandlerMapping：registerHandlerMethod(handler, invocableMethod, mapping);<br>  这里的mappingRegistry 是AbstractHandlerMethodMapping的内部类MappingRegistry;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">registerHandlerMethod</span><span class="params">(Object handler, Method method, T mapping)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.mappingRegistry.register(mapping, handler, method);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(T mapping, Object handler, Method method)</span> </span>&#123;</span><br><span class="line"><span class="comment">// Assert that the handler method is not a suspending one.</span></span><br><span class="line"><span class="keyword">if</span> (KotlinDetector.isKotlinType(method.getDeclaringClass()) &amp;&amp; KotlinDelegate.isSuspend(method)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Unsupported suspending handler method detected: "</span> + method);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.readWriteLock.writeLock().lock();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//封装成HandlerMethod</span></span><br><span class="line">HandlerMethod handlerMethod = createHandlerMethod(handler, method);</span><br><span class="line"><span class="comment">//判断mapping是否已经存在，存在抛异常</span></span><br><span class="line">validateMethodMapping(handlerMethod, mapping);</span><br><span class="line"><span class="comment">//关联 mapping--&gt;handlerMethod</span></span><br><span class="line"><span class="keyword">this</span>.mappingLookup.put(mapping, handlerMethod);</span><br><span class="line"><span class="comment">//根据mapping获取url并且将Url和mapping关联起来</span></span><br><span class="line">List&lt;String&gt; directUrls = getDirectUrls(mapping);</span><br><span class="line"><span class="keyword">for</span> (String url : directUrls) &#123;</span><br><span class="line"><span class="keyword">this</span>.urlLookup.add(url, mapping);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//关联name【RequestMappingInfoHandlerMethodMappingNamingStrategy.getName】和handlerMethod</span></span><br><span class="line">String name = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (getNamingStrategy() != <span class="keyword">null</span>) &#123;</span><br><span class="line">name = getNamingStrategy().getName(handlerMethod, mapping);</span><br><span class="line">addMappingName(name, handlerMethod);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//corsLookup绑定handlerMethod和corsConfig,注解或者方法上带CrossOrigin</span></span><br><span class="line">CorsConfiguration corsConfig = initCorsConfiguration(handler, method, mapping);</span><br><span class="line"><span class="keyword">if</span> (corsConfig != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.corsLookup.put(handlerMethod, corsConfig);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.registry.put(mapping, <span class="keyword">new</span> MappingRegistration&lt;&gt;(mapping, handlerMethod, directUrls, name));</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">this</span>.readWriteLock.writeLock().unlock();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  至此所有的RequestMapping都注册到容器中</p><h2 id="doDipatch时候"><a href="#doDipatch时候" class="headerlink" title="doDipatch时候"></a>doDipatch时候</h2><p>  通过reqeust获取handler和拦截器封装成HandlerExecutionChain过程</p><p>  找到在初始化时候注册的handlerMappings，调用它们的getHandler方法，具体实现在AbstraceHanlderMapping中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> HandlerExecutionChain <span class="title">getHandler</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//根据request获取一个指定的handler，如果没找到返回null，类型是HandlerMethod，调用链路RequestMappingHandlerMapping.getHandlerInternal--&gt;AbstractHandlerMethodMapping.getgetHandlerInternal</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//重点方法1 </span></span><br><span class="line">Object handler = getHandlerInternal(request);</span><br><span class="line"><span class="keyword">if</span> (handler == <span class="keyword">null</span>) &#123;</span><br><span class="line">handler = getDefaultHandler();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (handler == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Bean name or resolved handler?</span></span><br><span class="line"><span class="keyword">if</span> (handler <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">String handlerName = (String) handler;</span><br><span class="line">handler = obtainApplicationContext().getBean(handlerName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//重点方法2 返回HandlerExecutionChain【handler和拦截器】的封装</span></span><br><span class="line">HandlerExecutionChain executionChain = getHandlerExecutionChain(handler, request);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">logger.trace(<span class="string">"Mapped to "</span> + handler);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (logger.isDebugEnabled() &amp;&amp; !request.getDispatcherType().equals(DispatcherType.ASYNC)) &#123;</span><br><span class="line">logger.debug(<span class="string">"Mapped to "</span> + executionChain.getHandler());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (hasCorsConfigurationSource(handler)) &#123;</span><br><span class="line">CorsConfiguration config = (<span class="keyword">this</span>.corsConfigurationSource != <span class="keyword">null</span> ? <span class="keyword">this</span>.corsConfigurationSource.getCorsConfiguration(request) : <span class="keyword">null</span>);</span><br><span class="line">CorsConfiguration handlerConfig = getCorsConfiguration(handler, request);</span><br><span class="line">config = (config != <span class="keyword">null</span> ? config.combine(handlerConfig) : handlerConfig);</span><br><span class="line">executionChain = getCorsHandlerExecutionChain(request, executionChain, config);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> executionChain;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="重点方法1-getHandlerInternal"><a href="#重点方法1-getHandlerInternal" class="headerlink" title="重点方法1 getHandlerInternal"></a>重点方法1 getHandlerInternal</h3><p>  这里的实现见：AbstractHandlerMethodMapping.getgetHandlerInternal</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> HandlerMethod <span class="title">getHandlerInternal</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//获取urlPath用于查找HandlerMethod</span></span><br><span class="line">String lookupPath = getUrlPathHelper().getLookupPathForRequest(request);</span><br><span class="line">request.setAttribute(LOOKUP_PATH, lookupPath);</span><br><span class="line"><span class="keyword">this</span>.mappingRegistry.acquireReadLock();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//查找HandlerMethod 优先通过Path找，没找到轮询mappingLookup，之后对找到的HandlerMethod排序找到最合适的HandlerMethod</span></span><br><span class="line">HandlerMethod handlerMethod = lookupHandlerMethod(lookupPath, request);</span><br><span class="line"><span class="comment">//re-create bean 享元模式防止请求修改HandlerMethod</span></span><br><span class="line"><span class="keyword">return</span> (handlerMethod != <span class="keyword">null</span> ? handlerMethod.createWithResolvedBean() : <span class="keyword">null</span>);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">this</span>.mappingRegistry.releaseReadLock();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> HandlerMethod <span class="title">lookupHandlerMethod</span><span class="params">(String lookupPath, HttpServletRequest request)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">List&lt;Match&gt; matches = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="comment">//通过path查找到符合要求的RequestMappingInfo</span></span><br><span class="line">List&lt;T&gt; directPathMatches = <span class="keyword">this</span>.mappingRegistry.getMappingsByUrl(lookupPath);</span><br><span class="line"><span class="keyword">if</span> (directPathMatches != <span class="keyword">null</span>) &#123;</span><br><span class="line">addMatchingMappings(directPathMatches, matches, request);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果通过path没找到去mappingLookup轮询一遍查找</span></span><br><span class="line"><span class="keyword">if</span> (matches.isEmpty()) &#123;</span><br><span class="line"><span class="comment">// No choice but to go through all mappings...</span></span><br><span class="line">addMatchingMappings(<span class="keyword">this</span>.mappingRegistry.getMappings().keySet(), matches, request);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//不为空</span></span><br><span class="line"><span class="keyword">if</span> (!matches.isEmpty()) &#123;</span><br><span class="line"><span class="comment">//根据RequestMappingInfoHandlerMapping.getMappingComparator排序Match.mapping的Compare然后取第一个</span></span><br><span class="line"><span class="comment">// todo 优先级未看</span></span><br><span class="line">Comparator&lt;Match&gt; comparator = <span class="keyword">new</span> MatchComparator(getMappingComparator(request));</span><br><span class="line">matches.sort(comparator);</span><br><span class="line"><span class="comment">//排序后取第一个作为返回结果</span></span><br><span class="line">Match bestMatch = matches.get(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//取出来俩个然后优先级一样直接抛出异常意思是Handler重复"多个优先级"</span></span><br><span class="line"><span class="keyword">if</span> (matches.size() &gt; <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">logger.trace(matches.size() + <span class="string">" matching mappings: "</span> + matches);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (CorsUtils.isPreFlightRequest(request)) &#123;</span><br><span class="line"><span class="keyword">return</span> PREFLIGHT_AMBIGUOUS_MATCH;</span><br><span class="line">&#125;</span><br><span class="line">Match secondBestMatch = matches.get(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (comparator.compare(bestMatch, secondBestMatch) == <span class="number">0</span>) &#123;</span><br><span class="line">Method m1 = bestMatch.handlerMethod.getMethod();</span><br><span class="line">Method m2 = secondBestMatch.handlerMethod.getMethod();</span><br><span class="line">String uri = request.getRequestURI();</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line"><span class="string">"Ambiguous handler methods mapped for '"</span> + uri + <span class="string">"': &#123;"</span> + m1 + <span class="string">", "</span> + m2 + <span class="string">"&#125;"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">request.setAttribute(BEST_MATCHING_HANDLER_ATTRIBUTE, bestMatch.handlerMethod);</span><br><span class="line"><span class="comment">//为request设置值：PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE，返回对应的handlerMethod</span></span><br><span class="line"><span class="comment">//这里其实就是把mapping,和handler都返回只不过mapping放在了requst里</span></span><br><span class="line">handleMatch(bestMatch.mapping, lookupPath, request);</span><br><span class="line"><span class="keyword">return</span> bestMatch.handlerMethod;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//都没匹配到调用该方法见RequestMappingInfoHandlerMapping，其中不符合RequestMappingInfo的会抛异常</span></span><br><span class="line"><span class="keyword">return</span> handleNoMatch(<span class="keyword">this</span>.mappingRegistry.getMappings().keySet(), lookupPath, request);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="重点方法2-getHandlerExecutionChain"><a href="#重点方法2-getHandlerExecutionChain" class="headerlink" title="重点方法2 getHandlerExecutionChain"></a>重点方法2 getHandlerExecutionChain</h3><p>  返回handler和拦截器的封装，注：springboot的WebMvcConfigurer.addInterceptors方法中添加的拦截器会转成MappedInterceptor添加到RRequestMappingHandlerMapping中代码可以从WebMvcAutoConfiguration中看</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> HandlerExecutionChain <span class="title">getHandlerExecutionChain</span><span class="params">(Object handler, HttpServletRequest request)</span> </span>&#123;</span><br><span class="line"><span class="comment">//如果是一个存在的HandlerExecutionChain,直接返回，否则new一个HandlerExecutionChain</span></span><br><span class="line"><span class="comment">//new HandlerExecutionChain(handler)在HandlerExecutionChain的构造方法里会再判断下Handler的类型，</span></span><br><span class="line"><span class="comment">// 如果是HandlerExecutionChain进行merge</span></span><br><span class="line"><span class="comment">// 如果是HandlerMethod会进行赋值具体见HandlerExecutionChain构造方法</span></span><br><span class="line">HandlerExecutionChain chain = (handler <span class="keyword">instanceof</span> HandlerExecutionChain ?</span><br><span class="line">(HandlerExecutionChain) handler : <span class="keyword">new</span> HandlerExecutionChain(handler));</span><br><span class="line"></span><br><span class="line">String lookupPath = <span class="keyword">this</span>.urlPathHelper.getLookupPathForRequest(request, LOOKUP_PATH);</span><br><span class="line"><span class="comment">//处理拦截器，</span></span><br><span class="line"><span class="comment">// 如果是MappedInterceptor，判断lookupPath是否匹配如果匹配将拦截器加入到HandlerExecutionChain</span></span><br><span class="line"><span class="comment">// 如果是HandlerInterceptor 或者WebRequestInterceptor直接将拦截器加入到HandlerExecutionChain</span></span><br><span class="line"><span class="comment">// todo 注意：springboot 通过WebMvcConfigurer配置的interceptor最终都会转成MappedInterceptor，</span></span><br><span class="line"><span class="comment">// 见InterceptorRegistration.getInterceptor(),入口在WebMvcAutoConfiguration.requestMappingHandlerMapping()方法</span></span><br><span class="line"><span class="keyword">for</span> (HandlerInterceptor interceptor : <span class="keyword">this</span>.adaptedInterceptors) &#123;</span><br><span class="line"><span class="keyword">if</span> (interceptor <span class="keyword">instanceof</span> MappedInterceptor) &#123;</span><br><span class="line">MappedInterceptor mappedInterceptor = (MappedInterceptor) interceptor;</span><br><span class="line"><span class="keyword">if</span> (mappedInterceptor.matches(lookupPath, <span class="keyword">this</span>.pathMatcher)) &#123;</span><br><span class="line">chain.addInterceptor(mappedInterceptor.getInterceptor());</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">chain.addInterceptor(interceptor);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> chain;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回了包含handler和interceptor的HandlerExecutionChain为下一步handlerAdapter执行做好准备</p><h2 id="附录：MappingRegistry几个重要的容器"><a href="#附录：MappingRegistry几个重要的容器" class="headerlink" title="附录：MappingRegistry几个重要的容器"></a>附录：MappingRegistry几个重要的容器</h2><p>上面提到的register过程中涉及到了MappingRegistry类，它包含了几个重要容器用来缓存url,RequestMappingInfo HandlerMethod的对应关系</p><ul><li>urlLookup: url–&gt;List&lt;RequestMappingInfo&gt;</li><li>mappingLookup:RequestMappingInfo–&gt;HandlerMethod</li></ul><h2 id="附录：-RequestMapping注解"><a href="#附录：-RequestMapping注解" class="headerlink" title="附录：@RequestMapping注解"></a>附录：@RequestMapping注解</h2><p>  RequestMapping是一个用来处理请求地址映射的注解，可用于类或方法上。用于类上，表示类中的所有响应请求的方法都是以该地址作为父路径。</p><ul><li>value：指定请求的实际地址，指定的地址可以是URI Template 模式（后面将会说明）；</li><li>method：指定请求的method类型， GET、POST、PUT、DELETE等；</li><li>consumes：指定处理请求的提交内容类型（Content-Type），例如application/json, text/html;</li><li>produces：指定返回的内容类型，仅当request请求头中的(Accept)类型中包含该指定类型才返回；</li><li>params：指定request中必须包含某些参数值是，才让该方法处理。</li><li>headers：指定request中必须包含某些指定的header值，才能让该方法处理请求。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;RequestMappingHandlerMapping负责将RequestMapping注解的方法与url关联起来，并且返回HandlerExecutionChain&lt;/p&gt;
&lt;h2 id=&quot;加载过程&quot;&gt;&lt;a href=&quot;#加载过程&quot; class=&quot;headerlink&quot;
      
    
    </summary>
    
      <category term="java" scheme="https://liuhao163.github.io/categories/java/"/>
    
      <category term="spring" scheme="https://liuhao163.github.io/categories/java/spring/"/>
    
      <category term="mvc" scheme="https://liuhao163.github.io/categories/java/spring/mvc/"/>
    
    
      <category term="java" scheme="https://liuhao163.github.io/tags/java/"/>
    
      <category term="源码" scheme="https://liuhao163.github.io/tags/%E6%BA%90%E7%A0%81/"/>
    
      <category term="spring" scheme="https://liuhao163.github.io/tags/spring/"/>
    
      <category term="框架" scheme="https://liuhao163.github.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>SpringMvc源码-RequestMappingHandlerAdapter</title>
    <link href="https://liuhao163.github.io/SpringMvc%E6%BA%90%E7%A0%81-RequestMappingHandlerAdapter/"/>
    <id>https://liuhao163.github.io/SpringMvc源码-RequestMappingHandlerAdapter/</id>
    <published>2020-10-13T20:44:13.000Z</published>
    <updated>2022-09-21T15:03:02.181Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HandlerAdapter接口的说明"><a href="#HandlerAdapter接口的说明" class="headerlink" title="HandlerAdapter接口的说明"></a>HandlerAdapter接口的说明</h2><p>  在SprintMVC中，HandlerAdapter组件是一个handler适配器类，它通过handle方法调用request对应的controller方法来处理请求【HandlerMethod】</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Use the given handler to handle this request.</span></span><br><span class="line"><span class="comment"> * The workflow that is required may vary widely.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request current HTTP request</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> response current HTTP response</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> handler handler to use. This object must have previously been passed</span></span><br><span class="line"><span class="comment"> * to the &#123;<span class="doctag">@code</span> supports&#125; method of this interface, which must have 实际上是 HandlerMethod</span></span><br><span class="line"><span class="comment"> * returned &#123;<span class="doctag">@code</span> true&#125;.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception in case of errors</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> a ModelAndView object with the name of the view and the required</span></span><br><span class="line"><span class="comment"> * model data, or &#123;<span class="doctag">@code</span> null&#125; if the request has been handled directly</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="comment">//</span></span><br><span class="line"> <span class="meta">@Nullable</span></span><br><span class="line"><span class="function">ModelAndView <span class="title">handle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception</span>;</span><br></pre></td></tr></table></figure><h2 id="如何获取HandlerAdapter"><a href="#如何获取HandlerAdapter" class="headerlink" title="如何获取HandlerAdapter"></a>如何获取HandlerAdapter</h2><p>见DispatcherServlet.getHandlerAdapter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> HandlerAdapter <span class="title">getHandlerAdapter</span><span class="params">(Object handler)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"><span class="comment">//遍历DipatcherServlet.properties里org.springframework.web.servlet.HandlerAdapter的配置，调用handlerAdpater.supports看那个符合条件</span></span><br><span class="line"><span class="comment">//Springboot中，会执行RequestMappingHandler.supports--&gt;AbstractHandlerMethodAdapter.supports 即handler是HandlerMetod</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.handlerAdapters != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (HandlerAdapter adapter : <span class="keyword">this</span>.handlerAdapters) &#123;</span><br><span class="line"><span class="keyword">if</span> (adapter.supports(handler)) &#123; </span><br><span class="line"><span class="keyword">return</span> adapter;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ServletException(<span class="string">"No adapter for handler ["</span> + handler +</span><br><span class="line"><span class="string">"]: The DispatcherServlet configuration needs to include a HandlerAdapter that supports this handler"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="handle方法的执行"><a href="#handle方法的执行" class="headerlink" title="handle方法的执行"></a>handle方法的执行</h2><p>  调用路径是AbstractHandlerMethodAdapter.handle()–&gt;AbstractHandlerMethodAdapter.handleInternal()–&gt;RequestMappingHandlerAdapter.handleInternal。</p><p>  见RequestMappingHandlerAdapter.handleInternal</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> ModelAndView <span class="title">handleInternal</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">HttpServletResponse response, HandlerMethod handlerMethod)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">ModelAndView mav;</span><br><span class="line"><span class="comment">//校验requestMethod和requireSession</span></span><br><span class="line">checkRequest(request);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Execute invokeHandlerMethod in synchronized block if required.</span></span><br><span class="line"><span class="comment">// session线程不安全，如果想用户多次请求都访问同一个session需要加一个全局锁。。性能极差很少见</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.synchronizeOnSession) &#123;</span><br><span class="line">HttpSession session = request.getSession(<span class="keyword">false</span>);</span><br><span class="line"><span class="keyword">if</span> (session != <span class="keyword">null</span>) &#123;</span><br><span class="line">Object mutex = WebUtils.getSessionMutex(session);</span><br><span class="line"><span class="keyword">synchronized</span> (mutex) &#123;</span><br><span class="line">mav = invokeHandlerMethod(request, response, handlerMethod);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// No HttpSession available -&gt; no mutex necessary</span></span><br><span class="line">mav = invokeHandlerMethod(request, response, handlerMethod);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// No synchronization on session demanded at all...</span></span><br><span class="line"><span class="comment">// 关键方法，代理方法执行handlerMethod,返回modelAndView</span></span><br><span class="line">mav = invokeHandlerMethod(request, response, handlerMethod);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!response.containsHeader(HEADER_CACHE_CONTROL)) &#123;</span><br><span class="line"><span class="keyword">if</span> (getSessionAttributesHandler(handlerMethod).hasSessionAttributes()) &#123;</span><br><span class="line">applyCacheSeconds(response, <span class="keyword">this</span>.cacheSecondsForSessionAttributeHandlers);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">prepareResponse(response);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> mav;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="controller方法的执行原理，代理模式和反射的应用：invokeHandlerMethod"><a href="#controller方法的执行原理，代理模式和反射的应用：invokeHandlerMethod" class="headerlink" title="controller方法的执行原理，代理模式和反射的应用：invokeHandlerMethod"></a>controller方法的执行原理，代理模式和反射的应用：invokeHandlerMethod</h3><p>最终的执行实际上是利用了java的反射包，以及代理模式，关键代码见：invokeHandlerMethod</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Invoke the &#123;<span class="doctag">@link</span> RequestMapping&#125; handler method preparing a &#123;<span class="doctag">@link</span> ModelAndView&#125;</span></span><br><span class="line"><span class="comment"> * if view resolution is required.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 4.2</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #createInvocableHandlerMethod(HandlerMethod)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> ModelAndView <span class="title">invokeHandlerMethod</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">HttpServletResponse response, HandlerMethod handlerMethod)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//HttpServletRequest 的封装</span></span><br><span class="line">ServletWebRequest webRequest = <span class="keyword">new</span> ServletWebRequest(request, response);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//用来处理request中的参数映射，WebDataBinderFactory里的值见：afterPropertiesSet</span></span><br><span class="line">WebDataBinderFactory binderFactory = getDataBinderFactory(handlerMethod);</span><br><span class="line"><span class="comment">//用来创建初始化model</span></span><br><span class="line">ModelFactory modelFactory = getModelFactory(handlerMethod, binderFactory);</span><br><span class="line"><span class="comment">//根据handlerMethod实例化一个ServletInvocableHandlerMethod来处理请求</span></span><br><span class="line">ServletInvocableHandlerMethod invocableMethod = createInvocableHandlerMethod(handlerMethod);</span><br><span class="line"><span class="comment">//设置argumentResolvers处理request的参数 argumentResolvers里的值见afterPropertiesSet</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.argumentResolvers != <span class="keyword">null</span>) &#123;</span><br><span class="line">invocableMethod.setHandlerMethodArgumentResolvers(<span class="keyword">this</span>.argumentResolvers);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//设置argumentResolvers处理response的参数 returnValueHandlers里的值见afterPropertiesSet</span></span><br><span class="line"><span class="comment">// 可自定义 TODO 比如想给所有的ResponseBody返回值封装成&#123;code:0,msg:1,data:null&#125;</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.returnValueHandlers != <span class="keyword">null</span>) &#123;</span><br><span class="line">invocableMethod.setHandlerMethodReturnValueHandlers(<span class="keyword">this</span>.returnValueHandlers);</span><br><span class="line">&#125;</span><br><span class="line">invocableMethod.setDataBinderFactory(binderFactory);</span><br><span class="line">invocableMethod.setParameterNameDiscoverer(<span class="keyword">this</span>.parameterNameDiscoverer);</span><br><span class="line"></span><br><span class="line"><span class="comment">//modelAndView的上下文对象</span></span><br><span class="line">ModelAndViewContainer mavContainer = <span class="keyword">new</span> ModelAndViewContainer();</span><br><span class="line">mavContainer.addAllAttributes(RequestContextUtils.getInputFlashMap(request));</span><br><span class="line"><span class="comment">//初始化Model对象，同时将sessionAtrributes值和ModelAtrributes的值都合并在一起放在Model中</span></span><br><span class="line">modelFactory.initModel(webRequest, mavContainer, invocableMethod);</span><br><span class="line">mavContainer.setIgnoreDefaultModelOnRedirect(<span class="keyword">this</span>.ignoreDefaultModelOnRedirect);</span><br><span class="line"></span><br><span class="line"><span class="comment">//todo 未读</span></span><br><span class="line">AsyncWebRequest asyncWebRequest = WebAsyncUtils.createAsyncWebRequest(request, response);</span><br><span class="line">asyncWebRequest.setTimeout(<span class="keyword">this</span>.asyncRequestTimeout);</span><br><span class="line"></span><br><span class="line">WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</span><br><span class="line">asyncManager.setTaskExecutor(<span class="keyword">this</span>.taskExecutor);</span><br><span class="line">asyncManager.setAsyncWebRequest(asyncWebRequest);</span><br><span class="line">asyncManager.registerCallableInterceptors(<span class="keyword">this</span>.callableInterceptors);</span><br><span class="line">asyncManager.registerDeferredResultInterceptors(<span class="keyword">this</span>.deferredResultInterceptors);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (asyncManager.hasConcurrentResult()) &#123;</span><br><span class="line">Object result = asyncManager.getConcurrentResult();</span><br><span class="line">mavContainer = (ModelAndViewContainer) asyncManager.getConcurrentResultContext()[<span class="number">0</span>];</span><br><span class="line">asyncManager.clearConcurrentResult();</span><br><span class="line">LogFormatUtils.traceDebug(logger, traceOn -&gt; &#123;</span><br><span class="line">String formatted = LogFormatUtils.formatValue(result, !traceOn);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Resume with async result ["</span> + formatted + <span class="string">"]"</span>;</span><br><span class="line">&#125;);</span><br><span class="line">invocableMethod = invocableMethod.wrapConcurrentResult(result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//关键代码，通过handlerMethod的代理方法，执行Controller的方法，将结果存储到mavContainer</span></span><br><span class="line">invocableMethod.invokeAndHandle(webRequest, mavContainer);</span><br><span class="line"><span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取ModelAndView</span></span><br><span class="line"><span class="keyword">return</span> getModelAndView(mavContainer, modelFactory, webRequest);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line">webRequest.requestCompleted();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>invocableMethod.invokeAndHandle(webRequest, mavContainer);</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">invokeAndHandle</span><span class="params">(ServletWebRequest webRequest, ModelAndViewContainer mavContainer,</span></span></span><br><span class="line"><span class="function"><span class="params">Object... providedArgs)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//关键代码，通过java的反射机制doInvoke执行handlerMethod对应的controller方法</span></span><br><span class="line">Object returnValue = invokeForRequest(webRequest, mavContainer, providedArgs);</span><br><span class="line">setResponseStatus(webRequest);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (returnValue == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (isRequestNotModified(webRequest) || getResponseStatus() != <span class="keyword">null</span> || mavContainer.isRequestHandled()) &#123;</span><br><span class="line">disableContentCachingIfNecessary(webRequest);</span><br><span class="line">mavContainer.setRequestHandled(<span class="keyword">true</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (StringUtils.hasText(getResponseStatusReason())) &#123;</span><br><span class="line">mavContainer.setRequestHandled(<span class="keyword">true</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mavContainer.setRequestHandled(<span class="keyword">false</span>);</span><br><span class="line">Assert.state(<span class="keyword">this</span>.returnValueHandlers != <span class="keyword">null</span>, <span class="string">"No return value handlers"</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//调用returnValueHandlers 将返回值写到response中（webRequest.getNativeResponse)里</span></span><br><span class="line"><span class="comment">// 由于现在开发采用前后端分离，RestApi往往会用到RequestResponseBodyMethodProcessor，可以看这个类，返回值和controller方法有@ResponseBody</span></span><br><span class="line"><span class="keyword">this</span>.returnValueHandlers.handleReturnValue(</span><br><span class="line">returnValue, getReturnValueType(returnValue), mavContainer, webRequest);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line"><span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">logger.trace(formatErrorForReturnValue(returnValue), ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">throw</span> ex;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>invokeForRequest方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invokeForRequest</span><span class="params">(NativeWebRequest request, @Nullable ModelAndViewContainer mavContainer,</span></span></span><br><span class="line"><span class="function"><span class="params">Object... providedArgs)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//从request里获取controller执行方法的参数，request里的值变为方法里设置的参数</span></span><br><span class="line">Object[] args = getMethodArgumentValues(request, mavContainer, providedArgs);</span><br><span class="line"><span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">logger.trace(<span class="string">"Arguments: "</span> + Arrays.toString(args));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//通过java的反射机制，执行controller里的方法，方法参数getMethodArgumentValues获取</span></span><br><span class="line"><span class="keyword">return</span> doInvoke(args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">doInvoke</span><span class="params">(Object... args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">ReflectionUtils.makeAccessible(getBridgedMethod());</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//todo 通过反射执行方法 书签</span></span><br><span class="line"><span class="comment">//调用java反射包的invoke 代理执行HandlerMethod里econtroller对应的方法</span></span><br><span class="line"><span class="comment">// getBridgedMethod= 如果没有意外等于controller被执行的方法</span></span><br><span class="line"><span class="comment">// getBean()=Controller对象</span></span><br><span class="line"><span class="comment">// args=request通过argumentResolver得到的方法参数对象</span></span><br><span class="line"><span class="keyword">return</span> getBridgedMethod().invoke(getBean(), args);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (IllegalArgumentException ex) &#123;</span><br><span class="line">assertTargetBean(getBridgedMethod(), getBean(), args);</span><br><span class="line">String text = (ex.getMessage() != <span class="keyword">null</span> ? ex.getMessage() : <span class="string">"Illegal argument"</span>);</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(formatInvokeError(text, args), ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (InvocationTargetException ex) &#123;</span><br><span class="line"><span class="comment">// Unwrap for HandlerExceptionResolvers ...</span></span><br><span class="line">Throwable targetException = ex.getTargetException();</span><br><span class="line"><span class="keyword">if</span> (targetException <span class="keyword">instanceof</span> RuntimeException) &#123;</span><br><span class="line"><span class="keyword">throw</span> (RuntimeException) targetException;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (targetException <span class="keyword">instanceof</span> Error) &#123;</span><br><span class="line"><span class="keyword">throw</span> (Error) targetException;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (targetException <span class="keyword">instanceof</span> Exception) &#123;</span><br><span class="line"><span class="keyword">throw</span> (Exception) targetException;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(formatInvokeError(<span class="string">"Invocation failure"</span>, args), targetException);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;HandlerAdapter接口的说明&quot;&gt;&lt;a href=&quot;#HandlerAdapter接口的说明&quot; class=&quot;headerlink&quot; title=&quot;HandlerAdapter接口的说明&quot;&gt;&lt;/a&gt;HandlerAdapter接口的说明&lt;/h2&gt;&lt;p&gt;  
      
    
    </summary>
    
      <category term="java" scheme="https://liuhao163.github.io/categories/java/"/>
    
      <category term="spring" scheme="https://liuhao163.github.io/categories/java/spring/"/>
    
      <category term="mvc" scheme="https://liuhao163.github.io/categories/java/spring/mvc/"/>
    
    
      <category term="java" scheme="https://liuhao163.github.io/tags/java/"/>
    
      <category term="源码" scheme="https://liuhao163.github.io/tags/%E6%BA%90%E7%A0%81/"/>
    
      <category term="spring" scheme="https://liuhao163.github.io/tags/spring/"/>
    
      <category term="框架" scheme="https://liuhao163.github.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>如何精炼领域模型</title>
    <link href="https://liuhao163.github.io/%E5%A6%82%E4%BD%95%E7%B2%BE%E7%82%BC%E9%A2%86%E5%9F%9F%E6%A8%A1%E5%9E%8B/"/>
    <id>https://liuhao163.github.io/如何精炼领域模型/</id>
    <published>2020-10-04T10:36:20.000Z</published>
    <updated>2022-09-21T15:03:02.236Z</updated>
    
    <content type="html"><![CDATA[<p>  <a href="./如何保持领域模型的完整性">如何保持领域模型的完整性</a>描述如何通过Bounded Context使自己的领域模型保持完整，但是随着业务的不断发展模型也在不断的完善，模型本身会膨胀到我们难以控制。所以我们要时刻精简我们的模型，如何清晰的明确哪些是我们模型要解决的主要矛盾，即：“Core Domain”</p><h2 id="Core-Domain"><a href="#Core-Domain" class="headerlink" title="Core Domain"></a>Core Domain</h2><p>  核心领域，我们建模中亟待解决的主要矛盾</p><ul><li>它内容应该是精炼的</li><li>它在工作中的优先级应该是最高的最先被解决的</li><li>它应该是趋于稳定的，因为Core Domain经常被变更很有可能是我们对模型理解不够</li></ul><h2 id="Generic-Subdomain"><a href="#Generic-Subdomain" class="headerlink" title="Generic Subdomain"></a>Generic Subdomain</h2><p>  一些和我们当前要解决的核心问题【Core Domain】的通用知识我们应该分离出去至少在设计Core Domain时候它们的优先级不高，属于次要矛盾。比如订单系统中的“用户”，它不属于订单系统的Core Domain，订单系统的Core Domain更应该是订单的状态、流转等信息</p><h2 id="突出Core-Domain的俩种方法"><a href="#突出Core-Domain的俩种方法" class="headerlink" title="突出Core Domain的俩种方法"></a>突出Core Domain的俩种方法</h2><ol><li>Domain Vision Statement-领域远景说明：它很类似我们上学时候总结文章的主要内容，应该简要指出我们当前核心要解决的问题主旨，以及我们模型的核心价值，与此无关的信息都不要提，也就是我们常说的痛点。</li><li>Highted Core：突出核心，Core Domain应该能很容易的被分辨出来，应该被团队所有人非常容易的理解</li></ol><h2 id="Cohesive-Mechanism-内聚机制"><a href="#Cohesive-Mechanism-内聚机制" class="headerlink" title="Cohesive Mechanism 内聚机制"></a>Cohesive Mechanism 内聚机制</h2><p>  如果模型包含了很复杂、专业的算法，集成在模型中可能导致Core Domain的混乱那么我们可以把算法抽象出去并且提供api给Core Domain。很类似Generic Subdomain，它俩的区别可能Cohesive Mechanism只是封装了算法而不是模型。</p><h2 id="Segregated-Core-分离核心"><a href="#Segregated-Core-分离核心" class="headerlink" title="Segregated Core 分离核心"></a>Segregated Core 分离核心</h2><p>  模型中如果有一些起到支撑作用的对象、类和Core Domain掺杂在一起我们应该对其进行重构以保持Core Domain的简介、易理解。这时候我们往往先审核Core Domain将和其无关的代码放在其他的Moudle中，然后分别对Core Domain和那个Moudle进行重构。</p><p>  难点在于，团队对于Core Domain的统一认知，因为Core Domain在重构过程中是不断变化的</p><p>##</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;  &lt;a href=&quot;./如何保持领域模型的完整性&quot;&gt;如何保持领域模型的完整性&lt;/a&gt;描述如何通过Bounded Context使自己的领域模型保持完整，但是随着业务的不断发展模型也在不断的完善，模型本身会膨胀到我们难以控制。所以我们要时刻精简我们的模型，如何清晰的明确哪些
      
    
    </summary>
    
      <category term="读后感" scheme="https://liuhao163.github.io/categories/%E8%AF%BB%E5%90%8E%E6%84%9F/"/>
    
      <category term="领域驱动设计" scheme="https://liuhao163.github.io/categories/%E8%AF%BB%E5%90%8E%E6%84%9F/%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="技术" scheme="https://liuhao163.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="架构" scheme="https://liuhao163.github.io/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="DDD" scheme="https://liuhao163.github.io/tags/DDD/"/>
    
  </entry>
  
</feed>
